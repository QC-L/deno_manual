import projectConfig from '/pagic.config.js';
export default {
    'prev': {
        "title": "从源码构建",
        "link": "contributing/building_from_source.html"
    },
    'next': {
        "title": "Deno 风格指南",
        "link": "contributing/style_guide.html"
    },
    config: { "root": "/", ...projectConfig },
    'pagePath': "contributing/development_tools.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "contributing/development_tools.html",
    'title': "测试和工具",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>测试和工具</h1>\n<h2 id="%E6%B5%8B%E8%AF%95">测试<a class="anchor" href="#%E6%B5%8B%E8%AF%95">§</a></h2>\n<p>测试 <code>deno</code>:</p>\n<pre class="language-shell"><code class="language-shell"><span class="token comment"># 运行所有测试套件：</span>\ncargo <span class="token builtin class-name">test</span>\n\n<span class="token comment"># 只测试 cli/js/：</span>\ncargo <span class="token builtin class-name">test</span> js_unit_tests\n</code></pre>\n<p>测试 <code>std/</code>:</p>\n<pre class="language-shell"><code class="language-shell">cargo <span class="token builtin class-name">test</span> std_tests\n</code></pre>\n<h2 id="%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5%E4%B8%8E%E6%A0%BC%E5%BC%8F%E5%8C%96">代码检查与格式化<a class="anchor" href="#%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5%E4%B8%8E%E6%A0%BC%E5%BC%8F%E5%8C%96">§</a></h2>\n<p>检查</p>\n<pre class="language-shell"><code class="language-shell">./tools/lint.py\n</code></pre>\n<p>格式化</p>\n<pre class="language-shell"><code class="language-shell">./tools/format.py\n</code></pre>\n<h2 id="%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90">性能分析<a class="anchor" href="#%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90">§</a></h2>\n<pre class="language-autoit"><code class="language-autoit"># 确认我们正在构建发布版 <span class="token punctuation">(</span>release<span class="token punctuation">)</span>。\n# 构建 deno 和 V8 的 d8。\nninja <span class="token operator">-</span>C target<span class="token operator">/</span>release d8\n\n# 使用 <span class="token operator">-</span><span class="token operator">-</span>prof 选项运行想要分析的程序。\n<span class="token punctuation">.</span><span class="token operator">/</span>target<span class="token operator">/</span>release<span class="token operator">/</span>deno run tests<span class="token operator">/</span>http_bench<span class="token punctuation">.</span>ts <span class="token operator">-</span><span class="token operator">-</span>allow<span class="token operator">-</span>net <span class="token operator">-</span><span class="token operator">-</span>v8<span class="token operator">-</span>flags<span class="token operator">=</span><span class="token operator">-</span><span class="token operator">-</span>prof <span class="token operator">&amp;</span>\n\n# 施加压力。\nthird_party<span class="token operator">/</span>wrk<span class="token operator">/</span>linux<span class="token operator">/</span>wrk http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">4500</span><span class="token operator">/</span>\nkill `pgrep deno`\n</code></pre>\n<p>V8 将在当前目录写入一个文件，像这样 <code>isolate-0x7fad98242400-v8.log</code>。查看这个文件：</p>\n<pre class="language-autoit"><code class="language-autoit">D8_PATH<span class="token operator">=</span>target<span class="token operator">/</span>release<span class="token operator">/</span> <span class="token punctuation">.</span><span class="token operator">/</span>third_party<span class="token operator">/</span>v8<span class="token operator">/</span>tools<span class="token operator">/</span>linux<span class="token operator">-</span>tick<span class="token operator">-</span>processor\nisolate<span class="token operator">-</span><span class="token number">0x7fad98242400</span><span class="token operator">-</span>v8<span class="token punctuation">.</span>log <span class="token operator">></span> prof<span class="token punctuation">.</span>log\n# 在 macOS 上<span class="token punctuation">,</span> 使用 <span class="token punctuation">.</span><span class="token operator">/</span>third_party<span class="token operator">/</span>v8<span class="token operator">/</span>tools<span class="token operator">/</span>mac<span class="token operator">-</span>tick<span class="token operator">-</span>processor\n</code></pre>\n<p><code>prof.log</code> 将包含不用调用的 tick 分布。</p>\n<p>用 Web UI 查看这个日志，先生成 JSON 文件：</p>\n<pre class="language-autoit"><code class="language-autoit">D8_PATH<span class="token operator">=</span>target<span class="token operator">/</span>release<span class="token operator">/</span> <span class="token punctuation">.</span><span class="token operator">/</span>third_party<span class="token operator">/</span>v8<span class="token operator">/</span>tools<span class="token operator">/</span>linux<span class="token operator">-</span>tick<span class="token operator">-</span>processor\nisolate<span class="token operator">-</span><span class="token number">0x7fad98242400</span><span class="token operator">-</span>v8<span class="token punctuation">.</span>log <span class="token operator">-</span><span class="token operator">-</span>preprocess <span class="token operator">></span> prof<span class="token punctuation">.</span>json\n</code></pre>\n<p>在您的浏览器中打开 <code>third_party/v8/tools/profview/index.html</code>，选择 <code>prof.json</code> 以查看分布图。</p>\n<p>在性能分析时有用的 V8 选项：</p>\n<ul>\n<li>--prof</li>\n<li>--log-internal-timer-events</li>\n<li>--log-timer-events</li>\n<li>--track-gc</li>\n<li>--log-source-code</li>\n<li>--track-gc-object-stats</li>\n</ul>\n<p>有关 <code>d8</code> 和性能分析的更多信息，请查阅以下链接：</p>\n<ul>\n<li><a href="https://v8.dev/docs/d8">https://v8.dev/docs/d8</a></li>\n<li><a href="https://v8.dev/docs/profile">https://v8.dev/docs/profile</a></li>\n</ul>\n<h2 id="%E4%BD%BF%E7%94%A8-lldb-%E8%B0%83%E8%AF%95">使用 LLDB 调试<a class="anchor" href="#%E4%BD%BF%E7%94%A8-lldb-%E8%B0%83%E8%AF%95">§</a></h2>\n<h2 id="debugging-with-lldb">Debugging with LLDB<a class="anchor" href="#debugging-with-lldb">§</a></h2>\n<pre class="language-shell"><code class="language-shell">$ lldb -- target/debug/deno run tests/worker.js\n<span class="token operator">></span> run\n<span class="token operator">></span> bt\n<span class="token operator">></span> up\n<span class="token operator">></span> up\n<span class="token operator">></span> l\n</code></pre>\n<p>调试 Rust 代码，可以用 <code>rust-lldb</code>。</p>\n<pre class="language-shell"><code class="language-shell">$ rust-lldb -- ./target/debug/deno run --allow-net tests/http_bench.ts\n<span class="token comment"># 在 macOS 上，您可能看到像这样的警告：</span>\n<span class="token comment"># `ImportError: cannot import name _remove_dead_weakref`</span>\n<span class="token comment"># 在这种情况下，设置 PATH 以使用系统 python，例如</span>\n<span class="token comment"># PATH=/System/Library/Frameworks/Python.framework/Versions/2.7/bin:$PATH</span>\n<span class="token punctuation">(</span>lldb<span class="token punctuation">)</span> <span class="token builtin class-name">command</span> script <span class="token function">import</span> <span class="token string">"/Users/kevinqian/.rustup/toolchains/1.36.0-x86_64-apple-darwin/lib/rustlib/etc/lldb_rust_formatters.py"</span>\n<span class="token punctuation">(</span>lldb<span class="token punctuation">)</span> <span class="token builtin class-name">type</span> summary <span class="token function">add</span> --no-value --python-function lldb_rust_formatters.print_val -x <span class="token string">".*"</span> --category Rust\n<span class="token punctuation">(</span>lldb<span class="token punctuation">)</span> <span class="token builtin class-name">type</span> category <span class="token builtin class-name">enable</span> Rust\n<span class="token punctuation">(</span>lldb<span class="token punctuation">)</span> target create <span class="token string">"../deno/target/debug/deno"</span>\nCurrent executable <span class="token builtin class-name">set</span> to <span class="token string">\'../deno/target/debug/deno\'</span> <span class="token punctuation">(</span>x86_64<span class="token punctuation">)</span>.\n<span class="token punctuation">(</span>lldb<span class="token punctuation">)</span> settings <span class="token builtin class-name">set</span> -- target.run-args  <span class="token string">"tests/http_bench.ts"</span> <span class="token string">"--allow-net"</span>\n<span class="token punctuation">(</span>lldb<span class="token punctuation">)</span> b op_start\n<span class="token punctuation">(</span>lldb<span class="token punctuation">)</span> r\n</code></pre>\n<h2 id="v8-%E9%80%89%E9%A1%B9">V8 选项<a class="anchor" href="#v8-%E9%80%89%E9%A1%B9">§</a></h2>\n<p>V8 有很多内部的命令行选项。</p>\n<pre class="language-shell"><code class="language-shell">$ deno run --v8-flags<span class="token operator">=</span>--help _\n<span class="token assign-left variable">SSE3</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">SSSE3</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">SSE4_1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">SSE4_2</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">SAHF</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">AVX</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">FMA3</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">BMI1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">BMI2</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">LZCNT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">POPCNT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ATOM</span><span class="token operator">=</span><span class="token number">0</span>\nSynopsis:\n  shell <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>--shell<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>file<span class="token operator">></span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>\n  d8 <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>-e <span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--shell<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>--module<span class="token punctuation">]</span> <span class="token operator">&lt;</span>file<span class="token operator">></span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>\n\n  -e        execute a string <span class="token keyword">in</span> V8\n  --shell   run an interactive JavaScript shell\n  --module  execute a <span class="token function">file</span> as a JavaScript module\n\nNote: the --module option is implicitly enabled <span class="token keyword">for</span> *.mjs files.\n\nThe following syntax <span class="token keyword">for</span> options is accepted <span class="token punctuation">(</span>both <span class="token string">\'-\'</span> and <span class="token string">\'--\'</span> are ok<span class="token punctuation">)</span>:\n  --flag        <span class="token punctuation">(</span>bool flags only<span class="token punctuation">)</span>\n  --no-flag     <span class="token punctuation">(</span>bool flags only<span class="token punctuation">)</span>\n  --flag<span class="token operator">=</span>value  <span class="token punctuation">(</span>non-bool flags only, no spaces around <span class="token string">\'=\'</span><span class="token punctuation">)</span>\n  --flag value  <span class="token punctuation">(</span>non-bool flags only<span class="token punctuation">)</span>\n  --            <span class="token punctuation">(</span>captures all remaining args <span class="token keyword">in</span> JavaScript<span class="token punctuation">)</span>\n\nOptions:\n  --use-strict <span class="token punctuation">(</span>enforce strict mode<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --es-staging <span class="token punctuation">(</span>enable test-worthy harmony features <span class="token punctuation">(</span>for internal use only<span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --harmony <span class="token punctuation">(</span>enable all completed harmony features<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --harmony-shipping <span class="token punctuation">(</span>enable all shipped harmony features<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --harmony-regexp-sequence <span class="token punctuation">(</span>enable <span class="token string">"RegExp Unicode sequence properties"</span> <span class="token punctuation">(</span>in progress<span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --harmony-weak-refs-with-cleanup-some <span class="token punctuation">(</span>enable <span class="token string">"harmony weak references with FinalizationRegistry.prototype.cleanupSome"</span> <span class="token punctuation">(</span>in progress<span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --harmony-regexp-match-indices <span class="token punctuation">(</span>enable <span class="token string">"harmony regexp match indices"</span> <span class="token punctuation">(</span>in progress<span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --harmony-top-level-await <span class="token punctuation">(</span>enable <span class="token string">"harmony top level await"</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --harmony-namespace-exports <span class="token punctuation">(</span>enable <span class="token string">"harmony namespace exports (export * as foo from \'bar\')"</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --harmony-sharedarraybuffer <span class="token punctuation">(</span>enable <span class="token string">"harmony sharedarraybuffer"</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --harmony-import-meta <span class="token punctuation">(</span>enable <span class="token string">"harmony import.meta property"</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --harmony-dynamic-import <span class="token punctuation">(</span>enable <span class="token string">"harmony dynamic import"</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --harmony-promise-all-settled <span class="token punctuation">(</span>enable <span class="token string">"harmony Promise.allSettled"</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --harmony-promise-any <span class="token punctuation">(</span>enable <span class="token string">"harmony Promise.any"</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --harmony-private-methods <span class="token punctuation">(</span>enable <span class="token string">"harmony private methods in class literals"</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --harmony-weak-refs <span class="token punctuation">(</span>enable <span class="token string">"harmony weak references"</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --harmony-string-replaceall <span class="token punctuation">(</span>enable <span class="token string">"harmony String.prototype.replaceAll"</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --harmony-logical-assignment <span class="token punctuation">(</span>enable <span class="token string">"harmony logical assignment"</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --lite-mode <span class="token punctuation">(</span>enables trade-off of performance <span class="token keyword">for</span> memory savings<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --future <span class="token punctuation">(</span>Implies all staged features that we want to ship <span class="token keyword">in</span> the not-too-far future<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --assert-types <span class="token punctuation">(</span>generate runtime <span class="token builtin class-name">type</span> assertions to <span class="token builtin class-name">test</span> the typer<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --allocation-site-pretenuring <span class="token punctuation">(</span>pretenure with allocation sites<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --page-promotion <span class="token punctuation">(</span>promote pages based on utilization<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --always-promote-young-mc <span class="token punctuation">(</span>always promote young objects during mark-compact<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --page-promotion-threshold <span class="token punctuation">(</span>min percentage of live bytes on a page to <span class="token builtin class-name">enable</span> fast evacuation<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">70</span>\n  --trace-pretenuring <span class="token punctuation">(</span>trace pretenuring decisions of HAllocate instructions<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-pretenuring-statistics <span class="token punctuation">(</span>trace allocation site pretenuring statistics<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --track-fields <span class="token punctuation">(</span>track fields with only smi values<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --track-double-fields <span class="token punctuation">(</span>track fields with double values<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --track-heap-object-fields <span class="token punctuation">(</span>track fields with heap values<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --track-computed-fields <span class="token punctuation">(</span>track computed boilerplate fields<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --track-field-types <span class="token punctuation">(</span>track field types<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --trace-block-coverage <span class="token punctuation">(</span>trace collected block coverage information<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-protector-invalidation <span class="token punctuation">(</span>trace protector cell invalidations<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --feedback-normalization <span class="token punctuation">(</span>feed back normalization to constructors<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --enable-one-shot-optimization <span class="token punctuation">(</span>Enable size optimizations <span class="token keyword">for</span> the code that will only be executed once<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --unbox-double-arrays <span class="token punctuation">(</span>automatically unbox arrays of doubles<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --interrupt-budget <span class="token punctuation">(</span>interrupt budget <span class="token function">which</span> should be used <span class="token keyword">for</span> the profiler counter<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">147456</span>\n  --jitless <span class="token punctuation">(</span>Disable runtime allocation of executable memory.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --use-ic <span class="token punctuation">(</span>use inline caching<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --budget-for-feedback-vector-allocation <span class="token punctuation">(</span>The budget <span class="token keyword">in</span> amount of bytecode executed by a <span class="token keyword">function</span> before we decide to allocate feedback vectors<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">1024</span>\n  --lazy-feedback-allocation <span class="token punctuation">(</span>Allocate feedback vectors lazily<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --ignition-elide-noneffectful-bytecodes <span class="token punctuation">(</span>elide bytecodes <span class="token function">which</span> won<span class="token string">\'t have any external effect)\n        type: bool  default: true\n  --ignition-reo (use ignition register equivalence optimizer)\n        type: bool  default: true\n  --ignition-filter-expression-positions (filter expression positions before the bytecode pipeline)\n        type: bool  default: true\n  --ignition-share-named-property-feedback (share feedback slots when loading the same named property from the same object)\n        type: bool  default: true\n  --print-bytecode (print bytecode generated by ignition interpreter)\n        type: bool  default: false\n  --enable-lazy-source-positions (skip generating source positions during initial compile but regenerate when actually required)\n        type: bool  default: true\n  --stress-lazy-source-positions (collect lazy source positions immediately after lazy compile)\n        type: bool  default: false\n  --print-bytecode-filter (filter for selecting which functions to print bytecode)\n        type: string  default: *\n  --trace-ignition-codegen (trace the codegen of ignition interpreter bytecode handlers)\n        type: bool  default: false\n  --trace-ignition-dispatches (traces the dispatches to bytecode handlers by the ignition interpreter)\n        type: bool  default: false\n  --trace-ignition-dispatches-output-file (the file to which the bytecode handler dispatch table is written (by default, the table is not written to a file))\n        type: string  default: nullptr\n  --fast-math (faster (but maybe less accurate) math functions)\n        type: bool  default: true\n  --trace-track-allocation-sites (trace the tracking of allocation sites)\n        type: bool  default: false\n  --trace-migration (trace object migration)\n        type: bool  default: false\n  --trace-generalization (trace map generalization)\n        type: bool  default: false\n  --turboprop (enable experimental turboprop mid-tier compiler.)\n        type: bool  default: false\n  --concurrent-recompilation (optimizing hot functions asynchronously on a separate thread)\n        type: bool  default: true\n  --trace-concurrent-recompilation (track concurrent recompilation)\n        type: bool  default: false\n  --concurrent-recompilation-queue-length (the length of the concurrent compilation queue)\n        type: int  default: 8\n  --concurrent-recompilation-delay (artificial compilation delay in ms)\n        type: int  default: 0\n  --block-concurrent-recompilation (block queued jobs until released)\n        type: bool  default: false\n  --concurrent-inlining (run optimizing compiler\'</span>s inlining phase on a separate thread<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --max-serializer-nesting <span class="token punctuation">(</span>maximum levels <span class="token keyword">for</span> nesting child serializers<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">25</span>\n  --trace-heap-broker-verbose <span class="token punctuation">(</span>trace the heap broker verbosely <span class="token punctuation">(</span>all reports<span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-heap-broker-memory <span class="token punctuation">(</span>trace the heap broker memory <span class="token punctuation">(</span>refs analysis and zone numbers<span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-heap-broker <span class="token punctuation">(</span>trace the heap broker <span class="token punctuation">(</span>reports on missing data only<span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --stress-runs <span class="token punctuation">(</span>number of stress runs<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">0</span>\n  --deopt-every-n-times <span class="token punctuation">(</span>deoptimize every n <span class="token builtin class-name">times</span> a deopt point is passed<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">0</span>\n  --print-deopt-stress <span class="token punctuation">(</span>print number of possible deopt points<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --opt <span class="token punctuation">(</span>use adaptive optimizations<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --turbo-sp-frame-access <span class="token punctuation">(</span>use stack pointer-relative access to frame wherever possible<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --turbo-control-flow-aware-allocation <span class="token punctuation">(</span>consider control flow <span class="token keyword">while</span> allocating registers<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --turbo-filter <span class="token punctuation">(</span>optimization filter <span class="token keyword">for</span> TurboFan compiler<span class="token punctuation">)</span>\n        type: string  default: *\n  --trace-turbo <span class="token punctuation">(</span>trace generated TurboFan IR<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-turbo-path <span class="token punctuation">(</span>directory to dump generated TurboFan IR to<span class="token punctuation">)</span>\n        type: string  default: nullptr\n  --trace-turbo-filter <span class="token punctuation">(</span>filter <span class="token keyword">for</span> tracing turbofan compilation<span class="token punctuation">)</span>\n        type: string  default: *\n  --trace-turbo-graph <span class="token punctuation">(</span>trace generated TurboFan graphs<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-turbo-scheduled <span class="token punctuation">(</span>trace TurboFan IR with schedule<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-turbo-cfg-file <span class="token punctuation">(</span>trace turbo cfg graph <span class="token punctuation">(</span>for C1 visualizer<span class="token punctuation">)</span> to a given <span class="token function">file</span> name<span class="token punctuation">)</span>\n        type: string  default: nullptr\n  --trace-turbo-types <span class="token punctuation">(</span>trace TurboFan<span class="token string">\'s types)\n        type: bool  default: true\n  --trace-turbo-scheduler (trace TurboFan\'</span>s scheduler<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-turbo-reduction <span class="token punctuation">(</span>trace TurboFan<span class="token string">\'s various reducers)\n        type: bool  default: false\n  --trace-turbo-trimming (trace TurboFan\'</span>s graph trimmer<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-turbo-jt <span class="token punctuation">(</span>trace TurboFan<span class="token string">\'s jump threading)\n        type: bool  default: false\n  --trace-turbo-ceq (trace TurboFan\'</span>s control equivalence<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-turbo-loop <span class="token punctuation">(</span>trace TurboFan<span class="token string">\'s loop optimizations)\n        type: bool  default: false\n  --trace-turbo-alloc (trace TurboFan\'</span>s register allocator<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-all-uses <span class="token punctuation">(</span>trace all use positions<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-representation <span class="token punctuation">(</span>trace representation types<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --turbo-verify <span class="token punctuation">(</span>verify TurboFan graphs at each phase<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --turbo-verify-machine-graph <span class="token punctuation">(</span>verify TurboFan machine graph before instruction selection<span class="token punctuation">)</span>\n        type: string  default: nullptr\n  --trace-verify-csa <span class="token punctuation">(</span>trace code stubs verification<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --csa-trap-on-node <span class="token punctuation">(</span>trigger <span class="token builtin class-name">break</span> point when a node with given <span class="token function">id</span> is created <span class="token keyword">in</span> given stub. The <span class="token function">format</span> is: StubName,NodeId<span class="token punctuation">)</span>\n        type: string  default: nullptr\n  --turbo-stats <span class="token punctuation">(</span>print TurboFan statistics<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --turbo-stats-nvp <span class="token punctuation">(</span>print TurboFan statistics <span class="token keyword">in</span> machine-readable <span class="token function">format</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --turbo-stats-wasm <span class="token punctuation">(</span>print TurboFan statistics of wasm compilations<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --turbo-splitting <span class="token punctuation">(</span>split nodes during scheduling <span class="token keyword">in</span> TurboFan<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --function-context-specialization <span class="token punctuation">(</span>enable <span class="token keyword">function</span> context specialization <span class="token keyword">in</span> TurboFan<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --turbo-inlining <span class="token punctuation">(</span>enable inlining <span class="token keyword">in</span> TurboFan<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --max-inlined-bytecode-size <span class="token punctuation">(</span>maximum size of bytecode <span class="token keyword">for</span> a single inlining<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">500</span>\n  --max-inlined-bytecode-size-cumulative <span class="token punctuation">(</span>maximum cumulative size of bytecode considered <span class="token keyword">for</span> inlining<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">1000</span>\n  --max-inlined-bytecode-size-absolute <span class="token punctuation">(</span>maximum cumulative size of bytecode considered <span class="token keyword">for</span> inlining<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">5000</span>\n  --reserve-inline-budget-scale-factor <span class="token punctuation">(</span>maximum cumulative size of bytecode considered <span class="token keyword">for</span> inlining<span class="token punctuation">)</span>\n        type: float  default: <span class="token number">1.2</span>\n  --max-inlined-bytecode-size-small <span class="token punctuation">(</span>maximum size of bytecode considered <span class="token keyword">for</span> small <span class="token keyword">function</span> inlining<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">30</span>\n  --max-optimized-bytecode-size <span class="token punctuation">(</span>maximum bytecode size to be considered <span class="token keyword">for</span> optimization<span class="token punctuation">;</span> too high values may cause the compiler to hit <span class="token punctuation">(</span>release<span class="token punctuation">)</span> assertions<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">61440</span>\n  --min-inlining-frequency <span class="token punctuation">(</span>minimum frequency <span class="token keyword">for</span> inlining<span class="token punctuation">)</span>\n        type: float  default: <span class="token number">0.15</span>\n  --polymorphic-inlining <span class="token punctuation">(</span>polymorphic inlining<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --stress-inline <span class="token punctuation">(</span>set high thresholds <span class="token keyword">for</span> inlining to inline as much as possible<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-turbo-inlining <span class="token punctuation">(</span>trace TurboFan inlining<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --turbo-inline-array-builtins <span class="token punctuation">(</span>inline array builtins <span class="token keyword">in</span> TurboFan code<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --use-osr <span class="token punctuation">(</span>use on-stack replacement<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --trace-osr <span class="token punctuation">(</span>trace on-stack replacement<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --analyze-environment-liveness <span class="token punctuation">(</span>analyze liveness of environment slots and zap dead values<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --trace-environment-liveness <span class="token punctuation">(</span>trace liveness of <span class="token builtin class-name">local</span> variable slots<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --turbo-load-elimination <span class="token punctuation">(</span>enable load elimination <span class="token keyword">in</span> TurboFan<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --trace-turbo-load-elimination <span class="token punctuation">(</span>trace TurboFan load elimination<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --turbo-profiling <span class="token punctuation">(</span>enable basic block profiling <span class="token keyword">in</span> TurboFan<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --turbo-profiling-verbose <span class="token punctuation">(</span>enable basic block profiling <span class="token keyword">in</span> TurboFan, and include each <span class="token keyword">function</span><span class="token string">\'s schedule and disassembly in the output)\n        type: bool  default: false\n  --turbo-verify-allocation (verify register allocation in TurboFan)\n        type: bool  default: false\n  --turbo-move-optimization (optimize gap moves in TurboFan)\n        type: bool  default: true\n  --turbo-jt (enable jump threading in TurboFan)\n        type: bool  default: true\n  --turbo-loop-peeling (Turbofan loop peeling)\n        type: bool  default: true\n  --turbo-loop-variable (Turbofan loop variable optimization)\n        type: bool  default: true\n  --turbo-loop-rotation (Turbofan loop rotation)\n        type: bool  default: true\n  --turbo-cf-optimization (optimize control flow in TurboFan)\n        type: bool  default: true\n  --turbo-escape (enable escape analysis)\n        type: bool  default: true\n  --turbo-allocation-folding (Turbofan allocation folding)\n        type: bool  default: true\n  --turbo-instruction-scheduling (enable instruction scheduling in TurboFan)\n        type: bool  default: false\n  --turbo-stress-instruction-scheduling (randomly schedule instructions to stress dependency tracking)\n        type: bool  default: false\n  --turbo-store-elimination (enable store-store elimination in TurboFan)\n        type: bool  default: true\n  --trace-store-elimination (trace store elimination)\n        type: bool  default: false\n  --turbo-rewrite-far-jumps (rewrite far to near jumps (ia32,x64))\n        type: bool  default: true\n  --stress-gc-during-compilation (simulate GC/compiler thread race related to <a class="token url-link" href="https://crbug.com/v8/8520">https://crbug.com/v8/8520</a>)\n        type: bool  default: false\n  --turbo-fast-api-calls (enable fast API calls from TurboFan)\n        type: bool  default: false\n  --reuse-opt-code-count (don\'</span>t discard optimized code <span class="token keyword">for</span> the specified number of deopts.<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">0</span>\n  --turbo-nci <span class="token punctuation">(</span>enable experimental native context independent code.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --turbo-nci-as-highest-tier <span class="token punctuation">(</span>replace default TF with NCI code as the highest tier <span class="token keyword">for</span> testing purposes.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --print-nci-code <span class="token punctuation">(</span>print native context independent code.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-turbo-nci <span class="token punctuation">(</span>trace native context independent code.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --turbo-collect-feedback-in-generic-lowering <span class="token punctuation">(</span>enable experimental feedback collection <span class="token keyword">in</span> generic lowering.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --optimize-for-size <span class="token punctuation">(</span>Enables optimizations <span class="token function">which</span> favor memory size over execution speed<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --untrusted-code-mitigations <span class="token punctuation">(</span>Enable mitigations <span class="token keyword">for</span> executing untrusted code<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --expose-wasm <span class="token punctuation">(</span>expose wasm interface to JavaScript<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --assume-asmjs-origin <span class="token punctuation">(</span>force wasm decoder to assume input is internal asm-wasm <span class="token function">format</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --wasm-num-compilation-tasks <span class="token punctuation">(</span>maximum number of parallel compilation tasks <span class="token keyword">for</span> wasm<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">128</span>\n  --wasm-write-protect-code-memory <span class="token punctuation">(</span>write protect code memory on the wasm native heap<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --wasm-async-compilation <span class="token punctuation">(</span>enable actual asynchronous compilation <span class="token keyword">for</span> WebAssembly.compile<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --wasm-test-streaming <span class="token punctuation">(</span>use streaming compilation instead of async compilation <span class="token keyword">for</span> tests<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --wasm-max-mem-pages <span class="token punctuation">(</span>maximum initial number of 64KiB memory pages of a wasm instance<span class="token punctuation">)</span>\n        type: uint  default: <span class="token number">32767</span>\n  --wasm-max-mem-pages-growth <span class="token punctuation">(</span>maximum number of 64KiB pages a Wasm memory can grow to<span class="token punctuation">)</span>\n        type: uint  default: <span class="token number">65536</span>\n  --wasm-max-table-size <span class="token punctuation">(</span>maximum table size of a wasm instance<span class="token punctuation">)</span>\n        type: uint  default: <span class="token number">10000000</span>\n  --wasm-max-code-space <span class="token punctuation">(</span>maximum committed code space <span class="token keyword">for</span> wasm <span class="token punctuation">(</span>in MB<span class="token punctuation">))</span>\n        type: uint  default: <span class="token number">1024</span>\n  --wasm-tier-up <span class="token punctuation">(</span>enable tier up to the optimizing compiler <span class="token punctuation">(</span>requires --liftoff to have an effect<span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --trace-wasm-ast-start <span class="token punctuation">(</span>start <span class="token keyword">function</span> <span class="token keyword">for</span> wasm AST trace <span class="token punctuation">(</span>inclusive<span class="token punctuation">))</span>\n        type: int  default: <span class="token number">0</span>\n  --trace-wasm-ast-end <span class="token punctuation">(</span>end <span class="token keyword">function</span> <span class="token keyword">for</span> wasm AST trace <span class="token punctuation">(</span>exclusive<span class="token punctuation">))</span>\n        type: int  default: <span class="token number">0</span>\n  --liftoff <span class="token punctuation">(</span>enable Liftoff, the baseline compiler <span class="token keyword">for</span> WebAssembly<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --trace-wasm-memory <span class="token punctuation">(</span>print all memory updates performed <span class="token keyword">in</span> wasm code<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --wasm-tier-mask-for-testing <span class="token punctuation">(</span>bitmask of functions to compile with TurboFan instead of Liftoff<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">0</span>\n  --wasm-expose-debug-eval <span class="token punctuation">(</span>Expose wasm evaluator support on the CDP<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --validate-asm <span class="token punctuation">(</span>validate asm.js modules before compiling<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --suppress-asm-messages <span class="token punctuation">(</span>don<span class="token string">\'t emit asm.js related messages (for golden file testing))\n        type: bool  default: false\n  --trace-asm-time (log asm.js timing info to the console)\n        type: bool  default: false\n  --trace-asm-scanner (log tokens encountered by asm.js scanner)\n        type: bool  default: false\n  --trace-asm-parser (verbose logging of asm.js parse failures)\n        type: bool  default: false\n  --stress-validate-asm (try to validate everything as asm.js)\n        type: bool  default: false\n  --dump-wasm-module-path (directory to dump wasm modules to)\n        type: string  default: nullptr\n  --experimental-wasm-eh (enable prototype exception handling opcodes for wasm)\n        type: bool  default: false\n  --experimental-wasm-simd (enable prototype SIMD opcodes for wasm)\n        type: bool  default: false\n  --experimental-wasm-return-call (enable prototype return call opcodes for wasm)\n        type: bool  default: false\n  --experimental-wasm-compilation-hints (enable prototype compilation hints section for wasm)\n        type: bool  default: false\n  --experimental-wasm-gc (enable prototype garbage collection for wasm)\n        type: bool  default: false\n  --experimental-wasm-typed-funcref (enable prototype typed function references for wasm)\n        type: bool  default: false\n  --experimental-wasm-reftypes (enable prototype reference type opcodes for wasm)\n        type: bool  default: false\n  --experimental-wasm-threads (enable prototype thread opcodes for wasm)\n        type: bool  default: false\n  --experimental-wasm-type-reflection (enable prototype wasm type reflection in JS for wasm)\n        type: bool  default: false\n  --experimental-wasm-bigint (enable prototype JS BigInt support for wasm)\n        type: bool  default: true\n  --experimental-wasm-bulk-memory (enable prototype bulk memory opcodes for wasm)\n        type: bool  default: true\n  --experimental-wasm-mv (enable prototype multi-value support for wasm)\n        type: bool  default: true\n  --wasm-staging (enable staged wasm features)\n        type: bool  default: false\n  --wasm-opt (enable wasm optimization)\n        type: bool  default: false\n  --wasm-bounds-checks (enable bounds checks (disable for performance testing only))\n        type: bool  default: true\n  --wasm-stack-checks (enable stack checks (disable for performance testing only))\n        type: bool  default: true\n  --wasm-math-intrinsics (intrinsify some Math imports into wasm)\n        type: bool  default: true\n  --wasm-trap-handler (use signal handlers to catch out of bounds memory access in wasm (currently Linux x86_64 only))\n        type: bool  default: true\n  --wasm-fuzzer-gen-test (generate a test case when running a wasm fuzzer)\n        type: bool  default: false\n  --print-wasm-code (Print WebAssembly code)\n        type: bool  default: false\n  --print-wasm-stub-code (Print WebAssembly stub code)\n        type: bool  default: false\n  --asm-wasm-lazy-compilation (enable lazy compilation for asm-wasm modules)\n        type: bool  default: false\n  --wasm-lazy-compilation (enable lazy compilation for all wasm modules)\n        type: bool  default: false\n  --wasm-lazy-validation (enable lazy validation for lazily compiled wasm functions)\n        type: bool  default: false\n  --wasm-atomics-on-non-shared-memory (allow atomic operations on non-shared WebAssembly memory)\n        type: bool  default: true\n  --wasm-grow-shared-memory (allow growing shared WebAssembly memory objects)\n        type: bool  default: true\n  --wasm-simd-post-mvp (allow experimental SIMD operations for prototyping that are not included in the current proposal)\n        type: bool  default: false\n  --wasm-code-gc (enable garbage collection of wasm code)\n        type: bool  default: true\n  --trace-wasm-code-gc (trace garbage collection of wasm code)\n        type: bool  default: false\n  --stress-wasm-code-gc (stress test garbage collection of wasm code)\n        type: bool  default: false\n  --wasm-max-initial-code-space-reservation (maximum size of the initial wasm code space reservation (in MB))\n        type: int  default: 0\n  --frame-count (number of stack frames inspected by the profiler)\n        type: int  default: 1\n  --stress-sampling-allocation-profiler (Enables sampling allocation profiler with X as a sample interval)\n        type: int  default: 0\n  --lazy-new-space-shrinking (Enables the lazy new space shrinking strategy)\n        type: bool  default: false\n  --min-semi-space-size (min size of a semi-space (in MBytes), the new space consists of two semi-spaces)\n        type: size_t  default: 0\n  --max-semi-space-size (max size of a semi-space (in MBytes), the new space consists of two semi-spaces)\n        type: size_t  default: 0\n  --semi-space-growth-factor (factor by which to grow the new space)\n        type: int  default: 2\n  --max-old-space-size (max size of the old space (in Mbytes))\n        type: size_t  default: 0\n  --max-heap-size (max size of the heap (in Mbytes) both max_semi_space_size and max_old_space_size take precedence. All three flags cannot be specified at the same time.)\n        type: size_t  default: 0\n  --initial-heap-size (initial size of the heap (in Mbytes))\n        type: size_t  default: 0\n  --huge-max-old-generation-size (Increase max size of the old space to 4 GB for x64 systems withthe physical memory bigger than 16 GB)\n        type: bool  default: true\n  --initial-old-space-size (initial old space size (in Mbytes))\n        type: size_t  default: 0\n  --global-gc-scheduling (enable GC scheduling based on global memory)\n        type: bool  default: true\n  --gc-global (always perform global GCs)\n        type: bool  default: false\n  --random-gc-interval (Collect garbage after random(0, X) allocations. It overrides gc_interval.)\n        type: int  default: 0\n  --gc-interval (garbage collect after &lt;n> allocations)\n        type: int  default: -1\n  --retain-maps-for-n-gc (keeps maps alive for &lt;n> old space garbage collections)\n        type: int  default: 2\n  --trace-gc (print one trace line following each garbage collection)\n        type: bool  default: false\n  --trace-gc-nvp (print one detailed trace line in name=value format after each garbage collection)\n        type: bool  default: false\n  --trace-gc-ignore-scavenger (do not print trace line after scavenger collection)\n        type: bool  default: false\n  --trace-idle-notification (print one trace line following each idle notification)\n        type: bool  default: false\n  --trace-idle-notification-verbose (prints the heap state used by the idle notification)\n        type: bool  default: false\n  --trace-gc-verbose (print more details following each garbage collection)\n        type: bool  default: false\n  --trace-gc-freelists (prints details of each freelist before and after each major garbage collection)\n        type: bool  default: false\n  --trace-gc-freelists-verbose (prints details of freelists of each page before and after each major garbage collection)\n        type: bool  default: false\n  --trace-evacuation-candidates (Show statistics about the pages evacuation by the compaction)\n        type: bool  default: false\n  --trace-allocations-origins (Show statistics about the origins of allocations. Combine with --no-inline-new to track allocations from generated code)\n        type: bool  default: false\n  --trace-allocation-stack-interval (print stack trace after &lt;n> free-list allocations)\n        type: int  default: -1\n  --trace-duplicate-threshold-kb (print duplicate objects in the heap if their size is more than given threshold)\n        type: int  default: 0\n  --trace-fragmentation (report fragmentation for old space)\n        type: bool  default: false\n  --trace-fragmentation-verbose (report fragmentation for old space (detailed))\n        type: bool  default: false\n  --minor-mc-trace-fragmentation (trace fragmentation after marking)\n        type: bool  default: false\n  --trace-evacuation (report evacuation statistics)\n        type: bool  default: false\n  --trace-mutator-utilization (print mutator utilization, allocation speed, gc speed)\n        type: bool  default: false\n  --incremental-marking (use incremental marking)\n        type: bool  default: true\n  --incremental-marking-wrappers (use incremental marking for marking wrappers)\n        type: bool  default: true\n  --incremental-marking-task (use tasks for incremental marking)\n        type: bool  default: true\n  --incremental-marking-soft-trigger (threshold for starting incremental marking via a task in percent of available space: limit - size)\n        type: int  default: 0\n  --incremental-marking-hard-trigger (threshold for starting incremental marking immediately in percent of available space: limit - size)\n        type: int  default: 0\n  --trace-unmapper (Trace the unmapping)\n        type: bool  default: false\n  --parallel-scavenge (parallel scavenge)\n        type: bool  default: true\n  --scavenge-task (schedule scavenge tasks)\n        type: bool  default: true\n  --scavenge-task-trigger (scavenge task trigger in percent of the current heap limit)\n        type: int  default: 80\n  --scavenge-separate-stack-scanning (use a separate phase for stack scanning in scavenge)\n        type: bool  default: false\n  --trace-parallel-scavenge (trace parallel scavenge)\n        type: bool  default: false\n  --write-protect-code-memory (write protect code memory)\n        type: bool  default: true\n  --concurrent-marking (use concurrent marking)\n        type: bool  default: true\n  --concurrent-array-buffer-sweeping (concurrently sweep array buffers)\n        type: bool  default: true\n  --concurrent-allocation (concurrently allocate in old space)\n        type: bool  default: false\n  --local-heaps (allow heap access from background tasks)\n        type: bool  default: false\n  --stress-concurrent-allocation (start background threads that allocate memory)\n        type: bool  default: false\n  --parallel-marking (use parallel marking in atomic pause)\n        type: bool  default: true\n  --ephemeron-fixpoint-iterations (number of fixpoint iterations it takes to switch to linear ephemeron algorithm)\n        type: int  default: 10\n  --trace-concurrent-marking (trace concurrent marking)\n        type: bool  default: false\n  --concurrent-store-buffer (use concurrent store buffer processing)\n        type: bool  default: true\n  --concurrent-sweeping (use concurrent sweeping)\n        type: bool  default: true\n  --parallel-compaction (use parallel compaction)\n        type: bool  default: true\n  --parallel-pointer-update (use parallel pointer update during compaction)\n        type: bool  default: true\n  --detect-ineffective-gcs-near-heap-limit (trigger out-of-memory failure to avoid GC storm near heap limit)\n        type: bool  default: true\n  --trace-incremental-marking (trace progress of the incremental marking)\n        type: bool  default: false\n  --trace-stress-marking (trace stress marking progress)\n        type: bool  default: false\n  --trace-stress-scavenge (trace stress scavenge progress)\n        type: bool  default: false\n  --track-gc-object-stats (track object counts and memory usage)\n        type: bool  default: false\n  --trace-gc-object-stats (trace object counts and memory usage)\n        type: bool  default: false\n  --trace-zone-stats (trace zone memory usage)\n        type: bool  default: false\n  --zone-stats-tolerance (report a tick only when allocated zone memory changes by this amount)\n        type: size_t  default: 1048576\n  --track-retaining-path (enable support for tracking retaining path)\n        type: bool  default: false\n  --concurrent-array-buffer-freeing (free array buffer allocations on a background thread)\n        type: bool  default: true\n  --gc-stats (Used by tracing internally to enable gc statistics)\n        type: int  default: 0\n  --track-detached-contexts (track native contexts that are expected to be garbage collected)\n        type: bool  default: true\n  --trace-detached-contexts (trace native contexts that are expected to be garbage collected)\n        type: bool  default: false\n  --move-object-start (enable moving of object starts)\n        type: bool  default: true\n  --memory-reducer (use memory reducer)\n        type: bool  default: true\n  --memory-reducer-for-small-heaps (use memory reducer for small heaps)\n        type: bool  default: true\n  --heap-growing-percent (specifies heap growing factor as (1 + heap_growing_percent/100))\n        type: int  default: 0\n  --v8-os-page-size (override OS page size (in KBytes))\n        type: int  default: 0\n  --always-compact (Perform compaction on every full GC)\n        type: bool  default: false\n  --never-compact (Never perform compaction on full GC - testing only)\n        type: bool  default: false\n  --compact-code-space (Compact code space on full collections)\n        type: bool  default: true\n  --flush-bytecode (flush of bytecode when it has not been executed recently)\n        type: bool  default: true\n  --stress-flush-bytecode (stress bytecode flushing)\n        type: bool  default: false\n  --use-marking-progress-bar (Use a progress bar to scan large objects in increments when incremental marking is active.)\n        type: bool  default: true\n  --stress-per-context-marking-worklist (Use per-context worklist for marking)\n        type: bool  default: false\n  --force-marking-deque-overflows (force overflows of marking deque by reducing it\'</span>s size to <span class="token number">64</span> words<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --stress-compaction <span class="token punctuation">(</span>stress the GC compactor to flush out bugs <span class="token punctuation">(</span>implies --force_marking_deque_overflows<span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --stress-compaction-random <span class="token punctuation">(</span>Stress GC compaction by selecting random percent of pages as evacuation candidates. It overrides stress_compaction.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --stress-incremental-marking <span class="token punctuation">(</span>force incremental marking <span class="token keyword">for</span> small heaps and run it <span class="token function">more</span> often<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --fuzzer-gc-analysis <span class="token punctuation">(</span>prints number of allocations and enables analysis mode <span class="token keyword">for</span> gc fuzz testing, e.g. --stress-marking, --stress-scavenge<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --stress-marking <span class="token punctuation">(</span>force marking at random points between <span class="token number">0</span> and X <span class="token punctuation">(</span>inclusive<span class="token punctuation">)</span> percent of the regular marking start limit<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">0</span>\n  --stress-scavenge <span class="token punctuation">(</span>force scavenge at random points between <span class="token number">0</span> and X <span class="token punctuation">(</span>inclusive<span class="token punctuation">)</span> percent of the new space capacity<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">0</span>\n  --gc-experiment-background-schedule <span class="token punctuation">(</span>new background GC schedule heuristics<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --gc-experiment-less-compaction <span class="token punctuation">(</span>less compaction <span class="token keyword">in</span> non-memory reducing mode<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --disable-abortjs <span class="token punctuation">(</span>disables AbortJS runtime <span class="token keyword">function</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --randomize-all-allocations <span class="token punctuation">(</span>randomize virtual memory reservations by ignoring any hints passed when allocating pages<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --manual-evacuation-candidates-selection <span class="token punctuation">(</span>Test mode only flag. It allows an unit <span class="token builtin class-name">test</span> to <span class="token keyword">select</span> evacuation candidates pages <span class="token punctuation">(</span>requires --stress_compaction<span class="token punctuation">)</span>.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --fast-promotion-new-space <span class="token punctuation">(</span>fast promote new space on high survival rates<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --clear-free-memory <span class="token punctuation">(</span>initialize <span class="token function">free</span> memory with <span class="token number">0</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --young-generation-large-objects <span class="token punctuation">(</span>allocates large objects by default <span class="token keyword">in</span> the young generation large object space<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --debug-code <span class="token punctuation">(</span>generate extra code <span class="token punctuation">(</span>assertions<span class="token punctuation">)</span> <span class="token keyword">for</span> debugging<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --code-comments <span class="token punctuation">(</span>emit comments <span class="token keyword">in</span> code disassembly<span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token function">more</span> readable <span class="token builtin class-name">source</span> positions you should <span class="token function">add</span> --no-concurrent_recompilation<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --enable-sse3 <span class="token punctuation">(</span>enable use of SSE3 instructions <span class="token keyword">if</span> available<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --enable-ssse3 <span class="token punctuation">(</span>enable use of SSSE3 instructions <span class="token keyword">if</span> available<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --enable-sse4-1 <span class="token punctuation">(</span>enable use of SSE4.1 instructions <span class="token keyword">if</span> available<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --enable-sse4-2 <span class="token punctuation">(</span>enable use of SSE4.2 instructions <span class="token keyword">if</span> available<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --enable-sahf <span class="token punctuation">(</span>enable use of SAHF instruction <span class="token keyword">if</span> available <span class="token punctuation">(</span>X64 only<span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --enable-avx <span class="token punctuation">(</span>enable use of AVX instructions <span class="token keyword">if</span> available<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --enable-fma3 <span class="token punctuation">(</span>enable use of FMA3 instructions <span class="token keyword">if</span> available<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --enable-bmi1 <span class="token punctuation">(</span>enable use of BMI1 instructions <span class="token keyword">if</span> available<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --enable-bmi2 <span class="token punctuation">(</span>enable use of BMI2 instructions <span class="token keyword">if</span> available<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --enable-lzcnt <span class="token punctuation">(</span>enable use of LZCNT instruction <span class="token keyword">if</span> available<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --enable-popcnt <span class="token punctuation">(</span>enable use of POPCNT instruction <span class="token keyword">if</span> available<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --arm-arch <span class="token punctuation">(</span>generate instructions <span class="token keyword">for</span> the selected ARM architecture <span class="token keyword">if</span> available: armv6, armv7, armv7+sudiv or armv8<span class="token punctuation">)</span>\n        type: string  default: armv8\n  --force-long-branches <span class="token punctuation">(</span>force all emitted branches to be <span class="token keyword">in</span> long mode <span class="token punctuation">(</span>MIPS/PPC only<span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --mcpu <span class="token punctuation">(</span>enable optimization <span class="token keyword">for</span> specific cpu<span class="token punctuation">)</span>\n        type: string  default: auto\n  --partial-constant-pool <span class="token punctuation">(</span>enable use of partial constant pools <span class="token punctuation">(</span>X64 only<span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --sim-arm64-optional-features <span class="token punctuation">(</span>enable optional features on the simulator <span class="token keyword">for</span> testing: none or all<span class="token punctuation">)</span>\n        type: string  default: none\n  --enable-source-at-csa-bind <span class="token punctuation">(</span>Include <span class="token builtin class-name">source</span> information <span class="token keyword">in</span> the binary at CSA <span class="token builtin class-name">bind</span> locations.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --enable-armv7 <span class="token punctuation">(</span>deprecated <span class="token punctuation">(</span>use --arm_arch instead<span class="token punctuation">))</span>\n        type: maybe_bool  default: <span class="token builtin class-name">unset</span>\n  --enable-vfp3 <span class="token punctuation">(</span>deprecated <span class="token punctuation">(</span>use --arm_arch instead<span class="token punctuation">))</span>\n        type: maybe_bool  default: <span class="token builtin class-name">unset</span>\n  --enable-32dregs <span class="token punctuation">(</span>deprecated <span class="token punctuation">(</span>use --arm_arch instead<span class="token punctuation">))</span>\n        type: maybe_bool  default: <span class="token builtin class-name">unset</span>\n  --enable-neon <span class="token punctuation">(</span>deprecated <span class="token punctuation">(</span>use --arm_arch instead<span class="token punctuation">))</span>\n        type: maybe_bool  default: <span class="token builtin class-name">unset</span>\n  --enable-sudiv <span class="token punctuation">(</span>deprecated <span class="token punctuation">(</span>use --arm_arch instead<span class="token punctuation">))</span>\n        type: maybe_bool  default: <span class="token builtin class-name">unset</span>\n  --enable-armv8 <span class="token punctuation">(</span>deprecated <span class="token punctuation">(</span>use --arm_arch instead<span class="token punctuation">))</span>\n        type: maybe_bool  default: <span class="token builtin class-name">unset</span>\n  --enable-regexp-unaligned-accesses <span class="token punctuation">(</span>enable unaligned accesses <span class="token keyword">for</span> the regexp engine<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --script-streaming <span class="token punctuation">(</span>enable parsing on background<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --stress-background-compile <span class="token punctuation">(</span>stress <span class="token builtin class-name">test</span> parsing on background<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --finalize-streaming-on-background <span class="token punctuation">(</span>perform the script streaming finalization on the background thread<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --disable-old-api-accessors <span class="token punctuation">(</span>Disable old-style API accessors whose setters trigger through the prototype chain<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --expose-gc <span class="token punctuation">(</span>expose gc extension<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --expose-gc-as <span class="token punctuation">(</span>expose gc extension under the specified name<span class="token punctuation">)</span>\n        type: string  default: nullptr\n  --expose-externalize-string <span class="token punctuation">(</span>expose externalize string extension<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --expose-trigger-failure <span class="token punctuation">(</span>expose trigger-failure extension<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --stack-trace-limit <span class="token punctuation">(</span>number of stack frames to capture<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">10</span>\n  --builtins-in-stack-traces <span class="token punctuation">(</span>show built-in functions <span class="token keyword">in</span> stack traces<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --experimental-stack-trace-frames <span class="token punctuation">(</span>enable experimental frames <span class="token punctuation">(</span>API/Builtins<span class="token punctuation">)</span> and stack trace layout<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --disallow-code-generation-from-strings <span class="token punctuation">(</span>disallow <span class="token builtin class-name">eval</span> and friends<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --expose-async-hooks <span class="token punctuation">(</span>expose async_hooks object<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --expose-cputracemark-as <span class="token punctuation">(</span>expose cputracemark extension under the specified name<span class="token punctuation">)</span>\n        type: string  default: nullptr\n  --allow-unsafe-function-constructor <span class="token punctuation">(</span>allow invoking the <span class="token keyword">function</span> constructor without security checks<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --force-slow-path <span class="token punctuation">(</span>always take the slow path <span class="token keyword">for</span> builtins<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --test-small-max-function-context-stub-size <span class="token punctuation">(</span>enable testing the <span class="token keyword">function</span> context size overflow path by making the maximum size smaller<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --inline-new <span class="token punctuation">(</span>use fast inline allocation<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --trace <span class="token punctuation">(</span>trace javascript <span class="token keyword">function</span> calls<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-wasm <span class="token punctuation">(</span>trace wasm <span class="token keyword">function</span> calls<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --lazy <span class="token punctuation">(</span>use lazy compilation<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --max-lazy <span class="token punctuation">(</span>ignore eager compilation hints<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-opt <span class="token punctuation">(</span>trace lazy optimization<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-opt-verbose <span class="token punctuation">(</span>extra verbose compilation tracing<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-opt-stats <span class="token punctuation">(</span>trace lazy optimization statistics<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-deopt <span class="token punctuation">(</span>trace optimize <span class="token keyword">function</span> deoptimization<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-file-names <span class="token punctuation">(</span>include <span class="token function">file</span> names <span class="token keyword">in</span> trace-opt/trace-deopt output<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --always-opt <span class="token punctuation">(</span>always try to optimize functions<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --always-osr <span class="token punctuation">(</span>always try to OSR functions<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --prepare-always-opt <span class="token punctuation">(</span>prepare <span class="token keyword">for</span> turning on always opt<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-serializer <span class="token punctuation">(</span>print code serializer trace<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --compilation-cache <span class="token punctuation">(</span>enable compilation cache<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --cache-prototype-transitions <span class="token punctuation">(</span>cache prototype transitions<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --parallel-compile-tasks <span class="token punctuation">(</span>enable parallel compile tasks<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --compiler-dispatcher <span class="token punctuation">(</span>enable compiler dispatcher<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-compiler-dispatcher <span class="token punctuation">(</span>trace compiler dispatcher activity<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --cpu-profiler-sampling-interval <span class="token punctuation">(</span>CPU profiler sampling interval <span class="token keyword">in</span> microseconds<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">1000</span>\n  --trace-side-effect-free-debug-evaluate <span class="token punctuation">(</span>print debug messages <span class="token keyword">for</span> side-effect-free debug-evaluate <span class="token keyword">for</span> testing<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --hard-abort <span class="token punctuation">(</span>abort by crashing<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --expose-inspector-scripts <span class="token punctuation">(</span>expose injected-script-source.js <span class="token keyword">for</span> debugging<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --stack-size <span class="token punctuation">(</span>default size of stack region v8 is allowed to use <span class="token punctuation">(</span>in kBytes<span class="token punctuation">))</span>\n        type: int  default: <span class="token number">984</span>\n  --max-stack-trace-source-length <span class="token punctuation">(</span>maximum length of <span class="token keyword">function</span> <span class="token builtin class-name">source</span> code printed <span class="token keyword">in</span> a stack trace.<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">300</span>\n  --clear-exceptions-on-js-entry <span class="token punctuation">(</span>clear pending exceptions when entering JavaScript<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --histogram-interval <span class="token punctuation">(</span>time interval <span class="token keyword">in</span> ms <span class="token keyword">for</span> aggregating memory histograms<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">600000</span>\n  --heap-profiler-trace-objects <span class="token punctuation">(</span>Dump heap object allocations/movements/size_updates<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --heap-profiler-use-embedder-graph <span class="token punctuation">(</span>Use the new EmbedderGraph API to get embedder nodes<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --heap-snapshot-string-limit <span class="token punctuation">(</span>truncate strings to this length <span class="token keyword">in</span> the heap snapshot<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">1024</span>\n  --sampling-heap-profiler-suppress-randomness <span class="token punctuation">(</span>Use constant sample intervals to eliminate <span class="token builtin class-name">test</span> flakiness<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --use-idle-notification <span class="token punctuation">(</span>Use idle notification to reduce memory footprint.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --trace-ic <span class="token punctuation">(</span>trace inline cache state transitions <span class="token keyword">for</span> tools/ic-processor<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --modify-field-representation-inplace <span class="token punctuation">(</span>enable in-place field representation updates<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --max-polymorphic-map-count <span class="token punctuation">(</span>maximum number of maps to track <span class="token keyword">in</span> POLYMORPHIC state<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">4</span>\n  --native-code-counters <span class="token punctuation">(</span>generate extra code <span class="token keyword">for</span> manipulating stats counters<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --thin-strings <span class="token punctuation">(</span>Enable ThinString support<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --trace-prototype-users <span class="token punctuation">(</span>Trace updates to prototype user tracking<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-for-in-enumerate <span class="token punctuation">(</span>Trace for-in enumerate slow-paths<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-maps <span class="token punctuation">(</span>trace map creation<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-maps-details <span class="token punctuation">(</span>also log map details<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --allow-natives-syntax <span class="token punctuation">(</span>allow natives syntax<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --allow-natives-for-differential-fuzzing <span class="token punctuation">(</span>allow only natives explicitly allowlisted <span class="token keyword">for</span> differential fuzzers<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --parse-only <span class="token punctuation">(</span>only parse the sources<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-sim <span class="token punctuation">(</span>Trace simulator execution<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --debug-sim <span class="token punctuation">(</span>Enable debugging the simulator<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --check-icache <span class="token punctuation">(</span>Check icache flushes <span class="token keyword">in</span> ARM and MIPS simulator<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --stop-sim-at <span class="token punctuation">(</span>Simulator stop after x number of instructions<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">0</span>\n  --sim-stack-alignment <span class="token punctuation">(</span>Stack alingment <span class="token keyword">in</span> bytes <span class="token keyword">in</span> simulator <span class="token punctuation">(</span><span class="token number">4</span> or <span class="token number">8</span>, <span class="token number">8</span> is default<span class="token punctuation">))</span>\n        type: int  default: <span class="token number">8</span>\n  --sim-stack-size <span class="token punctuation">(</span>Stack size of the ARM64, MIPS64 and PPC64 simulator <span class="token keyword">in</span> kBytes <span class="token punctuation">(</span>default is <span class="token number">2</span> MB<span class="token punctuation">))</span>\n        type: int  default: <span class="token number">2048</span>\n  --log-colour <span class="token punctuation">(</span>When logging, try to use coloured output.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --trace-sim-messages <span class="token punctuation">(</span>Trace simulator debug messages. Implied by --trace-sim.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --async-stack-traces <span class="token punctuation">(</span>include async stack traces <span class="token keyword">in</span> Error.stack<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --stack-trace-on-illegal <span class="token punctuation">(</span>print stack trace when an illegal exception is thrown<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --abort-on-uncaught-exception <span class="token punctuation">(</span>abort program <span class="token punctuation">(</span>dump core<span class="token punctuation">)</span> when an uncaught exception is thrown<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --correctness-fuzzer-suppressions <span class="token punctuation">(</span>Suppress certain unspecified behaviors to ease correctness fuzzing: Abort program when the stack overflows or a string exceeds maximum length <span class="token punctuation">(</span>as opposed to throwing RangeError<span class="token punctuation">)</span>. Use a fixed suppression string <span class="token keyword">for</span> error messages.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --randomize-hashes <span class="token punctuation">(</span>randomize hashes to avoid predictable <span class="token builtin class-name">hash</span> collisions <span class="token punctuation">(</span>with snapshots this option cannot override the baked-in seed<span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --rehash-snapshot <span class="token punctuation">(</span>rehash strings from the snapshot to override the baked-in seed<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --hash-seed <span class="token punctuation">(</span>Fixed seed to use to <span class="token builtin class-name">hash</span> property keys <span class="token punctuation">(</span><span class="token number">0</span> means random<span class="token punctuation">)</span><span class="token punctuation">(</span>with snapshots this option cannot override the baked-in seed<span class="token punctuation">))</span>\n        type: uint64  default: <span class="token number">0</span>\n  --random-seed <span class="token punctuation">(</span>Default seed <span class="token keyword">for</span> initializing random generator <span class="token punctuation">(</span><span class="token number">0</span>, the default, means to use system random<span class="token punctuation">)</span>.<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">0</span>\n  --fuzzer-random-seed <span class="token punctuation">(</span>Default seed <span class="token keyword">for</span> initializing fuzzer random generator <span class="token punctuation">(</span><span class="token number">0</span>, the default, means to use v8\'s random number generator seed<span class="token punctuation">)</span>.<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">0</span>\n  --trace-rail <span class="token punctuation">(</span>trace RAIL mode<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --print-all-exceptions <span class="token punctuation">(</span>print exception object and stack trace on each thrown exception<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --detailed-error-stack-trace <span class="token punctuation">(</span>includes arguments <span class="token keyword">for</span> each <span class="token keyword">function</span> call <span class="token keyword">in</span> the error stack frames array<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --adjust-os-scheduling-parameters <span class="token punctuation">(</span>adjust OS specific scheduling params <span class="token keyword">for</span> the isolate<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --runtime-call-stats <span class="token punctuation">(</span>report runtime call counts and <span class="token builtin class-name">times</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --rcs <span class="token punctuation">(</span>report runtime call counts and <span class="token builtin class-name">times</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --rcs-cpu-time <span class="token punctuation">(</span>report runtime <span class="token builtin class-name">times</span> <span class="token keyword">in</span> cpu <span class="token function">time</span> <span class="token punctuation">(</span>the default is wall <span class="token function">time</span><span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --profile-deserialization <span class="token punctuation">(</span>Print the <span class="token function">time</span> it takes to deserialize the snapshot.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --serialization-statistics <span class="token punctuation">(</span>Collect statistics on serialized objects.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --serialization-chunk-size <span class="token punctuation">(</span>Custom size <span class="token keyword">for</span> serialization chunks<span class="token punctuation">)</span>\n        type: uint  default: <span class="token number">4096</span>\n  --regexp-optimization <span class="token punctuation">(</span>generate optimized regexp code<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --regexp-mode-modifiers <span class="token punctuation">(</span>enable inline flags <span class="token keyword">in</span> regexp.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --regexp-interpret-all <span class="token punctuation">(</span>interpret all regexp code<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --regexp-tier-up <span class="token punctuation">(</span>enable regexp interpreter and tier up to the compiler after the number of executions <span class="token builtin class-name">set</span> by the tier up ticks flag<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --regexp-tier-up-ticks <span class="token punctuation">(</span>set the number of executions <span class="token keyword">for</span> the regexp interpreter before tiering-up to the compiler<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">1</span>\n  --regexp-peephole-optimization <span class="token punctuation">(</span>enable peephole optimization <span class="token keyword">for</span> regexp bytecode<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --trace-regexp-peephole-optimization <span class="token punctuation">(</span>trace regexp bytecode peephole optimization<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-regexp-bytecodes <span class="token punctuation">(</span>trace regexp bytecode execution<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-regexp-assembler <span class="token punctuation">(</span>trace regexp macro assembler calls.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-regexp-parser <span class="token punctuation">(</span>trace regexp parsing<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-regexp-tier-up <span class="token punctuation">(</span>trace regexp tiering up execution<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --testing-bool-flag <span class="token punctuation">(</span>testing_bool_flag<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --testing-maybe-bool-flag <span class="token punctuation">(</span>testing_maybe_bool_flag<span class="token punctuation">)</span>\n        type: maybe_bool  default: <span class="token builtin class-name">unset</span>\n  --testing-int-flag <span class="token punctuation">(</span>testing_int_flag<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">13</span>\n  --testing-float-flag <span class="token punctuation">(</span>float-flag<span class="token punctuation">)</span>\n        type: float  default: <span class="token number">2.5</span>\n  --testing-string-flag <span class="token punctuation">(</span>string-flag<span class="token punctuation">)</span>\n        type: string  default: Hello, world<span class="token operator">!</span>\n  --testing-prng-seed <span class="token punctuation">(</span>Seed used <span class="token keyword">for</span> threading <span class="token builtin class-name">test</span> randomness<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">42</span>\n  --testing-d8-test-runner <span class="token punctuation">(</span>test runner turns on this flag to <span class="token builtin class-name">enable</span> a check that the <span class="token keyword">function</span> was prepared <span class="token keyword">for</span> optimization before marking it <span class="token keyword">for</span> optimization<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --fuzzing <span class="token punctuation">(</span>Fuzzers use this flag to signal that they are <span class="token punctuation">..</span>. fuzzing. This causes intrinsics to fail silently <span class="token punctuation">(</span>e.g. <span class="token builtin class-name">return</span> undefined<span class="token punctuation">)</span> on invalid usage.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --embedded-src <span class="token punctuation">(</span>Path <span class="token keyword">for</span> the generated embedded data file. <span class="token punctuation">(</span>mksnapshot only<span class="token punctuation">))</span>\n        type: string  default: nullptr\n  --embedded-variant <span class="token punctuation">(</span>Label to disambiguate symbols <span class="token keyword">in</span> embedded data file. <span class="token punctuation">(</span>mksnapshot only<span class="token punctuation">))</span>\n        type: string  default: nullptr\n  --startup-src <span class="token punctuation">(</span>Write V8 startup as C++ src. <span class="token punctuation">(</span>mksnapshot only<span class="token punctuation">))</span>\n        type: string  default: nullptr\n  --startup-blob <span class="token punctuation">(</span>Write V8 startup blob file. <span class="token punctuation">(</span>mksnapshot only<span class="token punctuation">))</span>\n        type: string  default: nullptr\n  --target-arch <span class="token punctuation">(</span>The mksnapshot target arch. <span class="token punctuation">(</span>mksnapshot only<span class="token punctuation">))</span>\n        type: string  default: nullptr\n  --target-os <span class="token punctuation">(</span>The mksnapshot target os. <span class="token punctuation">(</span>mksnapshot only<span class="token punctuation">))</span>\n        type: string  default: nullptr\n  --target-is-simulator <span class="token punctuation">(</span>Instruct mksnapshot that the target is meant to run <span class="token keyword">in</span> the simulator and it can generate simulator-specific instructions. <span class="token punctuation">(</span>mksnapshot only<span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --minor-mc-parallel-marking <span class="token punctuation">(</span>use parallel marking <span class="token keyword">for</span> the young generation<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --trace-minor-mc-parallel-marking <span class="token punctuation">(</span>trace parallel marking <span class="token keyword">for</span> the young generation<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --minor-mc <span class="token punctuation">(</span>perform young generation mark compact GCs<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --help <span class="token punctuation">(</span>Print usage message, including flags, on console<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --dump-counters <span class="token punctuation">(</span>Dump counters on <span class="token builtin class-name">exit</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --dump-counters-nvp <span class="token punctuation">(</span>Dump counters as name-value pairs on <span class="token builtin class-name">exit</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --use-external-strings <span class="token punctuation">(</span>Use external strings <span class="token keyword">for</span> <span class="token builtin class-name">source</span> code<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --map-counters <span class="token punctuation">(</span>Map counters to a <span class="token function">file</span><span class="token punctuation">)</span>\n        type: string  default:\n  --mock-arraybuffer-allocator <span class="token punctuation">(</span>Use a mock ArrayBuffer allocator <span class="token keyword">for</span> testing.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --mock-arraybuffer-allocator-limit <span class="token punctuation">(</span>Memory limit <span class="token keyword">for</span> mock ArrayBuffer allocator used to simulate OOM <span class="token keyword">for</span> testing.<span class="token punctuation">)</span>\n        type: size_t  default: <span class="token number">0</span>\n  --gdbjit <span class="token punctuation">(</span>enable GDBJIT interface<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --gdbjit-full <span class="token punctuation">(</span>enable GDBJIT interface <span class="token keyword">for</span> all code objects<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --gdbjit-dump <span class="token punctuation">(</span>dump elf objects with debug info to disk<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --gdbjit-dump-filter <span class="token punctuation">(</span>dump only objects containing this substring<span class="token punctuation">)</span>\n        type: string  default:\n  --log <span class="token punctuation">(</span>Minimal logging <span class="token punctuation">(</span>no API, code, GC, suspect, or handles samples<span class="token punctuation">)</span>.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --log-all <span class="token punctuation">(</span>Log all events to the log file.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --log-api <span class="token punctuation">(</span>Log API events to the log file.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --log-code <span class="token punctuation">(</span>Log code events to the log <span class="token function">file</span> without profiling.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --log-handles <span class="token punctuation">(</span>Log global handle events.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --log-suspect <span class="token punctuation">(</span>Log suspect operations.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --log-source-code <span class="token punctuation">(</span>Log <span class="token builtin class-name">source</span> code.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --log-function-events <span class="token punctuation">(</span>Log <span class="token keyword">function</span> events <span class="token punctuation">(</span>parse, compile, execute<span class="token punctuation">)</span> separately.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --prof <span class="token punctuation">(</span>Log statistical profiling information <span class="token punctuation">(</span>implies --log-code<span class="token punctuation">)</span>.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --detailed-line-info <span class="token punctuation">(</span>Always generate detailed line information <span class="token keyword">for</span> CPU profiling.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --prof-sampling-interval <span class="token punctuation">(</span>Interval <span class="token keyword">for</span> --prof samples <span class="token punctuation">(</span>in microseconds<span class="token punctuation">)</span>.<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">1000</span>\n  --prof-cpp <span class="token punctuation">(</span>Like --prof, but ignore generated code.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --prof-browser-mode <span class="token punctuation">(</span>Used with --prof, turns on browser-compatible mode <span class="token keyword">for</span> profiling.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --logfile <span class="token punctuation">(</span>Specify the name of the log file.<span class="token punctuation">)</span>\n        type: string  default: v8.log\n  --logfile-per-isolate <span class="token punctuation">(</span>Separate log files <span class="token keyword">for</span> each isolate.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --ll-prof <span class="token punctuation">(</span>Enable low-level linux profiler.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --gc-fake-mmap <span class="token punctuation">(</span>Specify the name of the <span class="token function">file</span> <span class="token keyword">for</span> fake gc mmap used <span class="token keyword">in</span> ll_prof<span class="token punctuation">)</span>\n        type: string  default: /tmp/__v8_gc__\n  --log-internal-timer-events <span class="token punctuation">(</span>Time internal events.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --redirect-code-traces <span class="token punctuation">(</span>output deopt information and disassembly into <span class="token function">file</span> code-<span class="token operator">&lt;</span>pid<span class="token operator">></span>-<span class="token operator">&lt;</span>isolate id<span class="token operator">></span>.asm<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --redirect-code-traces-to <span class="token punctuation">(</span>output deopt information and disassembly into the given <span class="token function">file</span><span class="token punctuation">)</span>\n        type: string  default: nullptr\n  --print-opt-source <span class="token punctuation">(</span>print <span class="token builtin class-name">source</span> code of optimized and inlined functions<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --vtune-prof-annotate-wasm <span class="token punctuation">(</span>Used when v8_enable_vtunejit is enabled, load wasm <span class="token builtin class-name">source</span> map and provide annotate support <span class="token punctuation">(</span>experimental<span class="token punctuation">)</span>.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --win64-unwinding-info <span class="token punctuation">(</span>Enable unwinding info <span class="token keyword">for</span> Windows/x64<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --interpreted-frames-native-stack <span class="token punctuation">(</span>Show interpreted frames on the native stack <span class="token punctuation">(</span>useful <span class="token keyword">for</span> external profilers<span class="token punctuation">)</span>.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --predictable <span class="token punctuation">(</span>enable predictable mode<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --predictable-gc-schedule <span class="token punctuation">(</span>Predictable garbage collection schedule. Fixes heap growing, idle, and memory reducing behavior.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --single-threaded <span class="token punctuation">(</span>disable the use of background tasks<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --single-threaded-gc <span class="token punctuation">(</span>disable the use of background gc tasks<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n</code></pre>\n<p>特别有用的：</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">-</span><span class="token operator">-</span>async<span class="token operator">-</span>stack<span class="token operator">-</span>trace\n</code></pre>\n<h2 id="%E6%8C%81%E7%BB%AD%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95">持续的性能测试<a class="anchor" href="#%E6%8C%81%E7%BB%AD%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95">§</a></h2>\n<p>参考我们的测试 <a href="https://deno.land/benchmarks">https://deno.land/benchmarks</a></p>\n<p>测试图表假设 <a href="https://github.com/denoland/benchmark_data/blob/gh-pages/data.json">https://github.com/denoland/benchmark_data/blob/gh-pages/data.json</a> 有着 <code>BenchmarkData[]</code> 类型。以下是 <code>BenchmarkData</code> 的定义：</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">ExecTimeData</span> <span class="token punctuation">{</span>\n  mean<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  stddev<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  user<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  system<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  min<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  max<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">BenchmarkData</span> <span class="token punctuation">{</span>\n  created_at<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  sha1<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  benchmark<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> ExecTimeData<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  binarySizeData<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  threadCountData<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  syscallCountData<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>'
        } }),
    'head': React.createElement("link", { href: "/favicon.svg", rel: "icon", type: "image/svg+xml" }),
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@16.13.1/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@16.13.1/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'contentTitle': React.createElement("h1", { key: "0" }, "\u6D4B\u8BD5\u548C\u5DE5\u5177"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="%E6%B5%8B%E8%AF%95">测试<a class="anchor" href="#%E6%B5%8B%E8%AF%95">§</a></h2>\n<p>测试 <code>deno</code>:</p>\n<pre class="language-shell"><code class="language-shell"><span class="token comment"># 运行所有测试套件：</span>\ncargo <span class="token builtin class-name">test</span>\n\n<span class="token comment"># 只测试 cli/js/：</span>\ncargo <span class="token builtin class-name">test</span> js_unit_tests\n</code></pre>\n<p>测试 <code>std/</code>:</p>\n<pre class="language-shell"><code class="language-shell">cargo <span class="token builtin class-name">test</span> std_tests\n</code></pre>\n<h2 id="%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5%E4%B8%8E%E6%A0%BC%E5%BC%8F%E5%8C%96">代码检查与格式化<a class="anchor" href="#%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5%E4%B8%8E%E6%A0%BC%E5%BC%8F%E5%8C%96">§</a></h2>\n<p>检查</p>\n<pre class="language-shell"><code class="language-shell">./tools/lint.py\n</code></pre>\n<p>格式化</p>\n<pre class="language-shell"><code class="language-shell">./tools/format.py\n</code></pre>\n<h2 id="%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90">性能分析<a class="anchor" href="#%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90">§</a></h2>\n<pre class="language-autoit"><code class="language-autoit"># 确认我们正在构建发布版 <span class="token punctuation">(</span>release<span class="token punctuation">)</span>。\n# 构建 deno 和 V8 的 d8。\nninja <span class="token operator">-</span>C target<span class="token operator">/</span>release d8\n\n# 使用 <span class="token operator">-</span><span class="token operator">-</span>prof 选项运行想要分析的程序。\n<span class="token punctuation">.</span><span class="token operator">/</span>target<span class="token operator">/</span>release<span class="token operator">/</span>deno run tests<span class="token operator">/</span>http_bench<span class="token punctuation">.</span>ts <span class="token operator">-</span><span class="token operator">-</span>allow<span class="token operator">-</span>net <span class="token operator">-</span><span class="token operator">-</span>v8<span class="token operator">-</span>flags<span class="token operator">=</span><span class="token operator">-</span><span class="token operator">-</span>prof <span class="token operator">&amp;</span>\n\n# 施加压力。\nthird_party<span class="token operator">/</span>wrk<span class="token operator">/</span>linux<span class="token operator">/</span>wrk http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">4500</span><span class="token operator">/</span>\nkill `pgrep deno`\n</code></pre>\n<p>V8 将在当前目录写入一个文件，像这样 <code>isolate-0x7fad98242400-v8.log</code>。查看这个文件：</p>\n<pre class="language-autoit"><code class="language-autoit">D8_PATH<span class="token operator">=</span>target<span class="token operator">/</span>release<span class="token operator">/</span> <span class="token punctuation">.</span><span class="token operator">/</span>third_party<span class="token operator">/</span>v8<span class="token operator">/</span>tools<span class="token operator">/</span>linux<span class="token operator">-</span>tick<span class="token operator">-</span>processor\nisolate<span class="token operator">-</span><span class="token number">0x7fad98242400</span><span class="token operator">-</span>v8<span class="token punctuation">.</span>log <span class="token operator">></span> prof<span class="token punctuation">.</span>log\n# 在 macOS 上<span class="token punctuation">,</span> 使用 <span class="token punctuation">.</span><span class="token operator">/</span>third_party<span class="token operator">/</span>v8<span class="token operator">/</span>tools<span class="token operator">/</span>mac<span class="token operator">-</span>tick<span class="token operator">-</span>processor\n</code></pre>\n<p><code>prof.log</code> 将包含不用调用的 tick 分布。</p>\n<p>用 Web UI 查看这个日志，先生成 JSON 文件：</p>\n<pre class="language-autoit"><code class="language-autoit">D8_PATH<span class="token operator">=</span>target<span class="token operator">/</span>release<span class="token operator">/</span> <span class="token punctuation">.</span><span class="token operator">/</span>third_party<span class="token operator">/</span>v8<span class="token operator">/</span>tools<span class="token operator">/</span>linux<span class="token operator">-</span>tick<span class="token operator">-</span>processor\nisolate<span class="token operator">-</span><span class="token number">0x7fad98242400</span><span class="token operator">-</span>v8<span class="token punctuation">.</span>log <span class="token operator">-</span><span class="token operator">-</span>preprocess <span class="token operator">></span> prof<span class="token punctuation">.</span>json\n</code></pre>\n<p>在您的浏览器中打开 <code>third_party/v8/tools/profview/index.html</code>，选择 <code>prof.json</code> 以查看分布图。</p>\n<p>在性能分析时有用的 V8 选项：</p>\n<ul>\n<li>--prof</li>\n<li>--log-internal-timer-events</li>\n<li>--log-timer-events</li>\n<li>--track-gc</li>\n<li>--log-source-code</li>\n<li>--track-gc-object-stats</li>\n</ul>\n<p>有关 <code>d8</code> 和性能分析的更多信息，请查阅以下链接：</p>\n<ul>\n<li><a href="https://v8.dev/docs/d8">https://v8.dev/docs/d8</a></li>\n<li><a href="https://v8.dev/docs/profile">https://v8.dev/docs/profile</a></li>\n</ul>\n<h2 id="%E4%BD%BF%E7%94%A8-lldb-%E8%B0%83%E8%AF%95">使用 LLDB 调试<a class="anchor" href="#%E4%BD%BF%E7%94%A8-lldb-%E8%B0%83%E8%AF%95">§</a></h2>\n<h2 id="debugging-with-lldb">Debugging with LLDB<a class="anchor" href="#debugging-with-lldb">§</a></h2>\n<pre class="language-shell"><code class="language-shell">$ lldb -- target/debug/deno run tests/worker.js\n<span class="token operator">></span> run\n<span class="token operator">></span> bt\n<span class="token operator">></span> up\n<span class="token operator">></span> up\n<span class="token operator">></span> l\n</code></pre>\n<p>调试 Rust 代码，可以用 <code>rust-lldb</code>。</p>\n<pre class="language-shell"><code class="language-shell">$ rust-lldb -- ./target/debug/deno run --allow-net tests/http_bench.ts\n<span class="token comment"># 在 macOS 上，您可能看到像这样的警告：</span>\n<span class="token comment"># `ImportError: cannot import name _remove_dead_weakref`</span>\n<span class="token comment"># 在这种情况下，设置 PATH 以使用系统 python，例如</span>\n<span class="token comment"># PATH=/System/Library/Frameworks/Python.framework/Versions/2.7/bin:$PATH</span>\n<span class="token punctuation">(</span>lldb<span class="token punctuation">)</span> <span class="token builtin class-name">command</span> script <span class="token function">import</span> <span class="token string">"/Users/kevinqian/.rustup/toolchains/1.36.0-x86_64-apple-darwin/lib/rustlib/etc/lldb_rust_formatters.py"</span>\n<span class="token punctuation">(</span>lldb<span class="token punctuation">)</span> <span class="token builtin class-name">type</span> summary <span class="token function">add</span> --no-value --python-function lldb_rust_formatters.print_val -x <span class="token string">".*"</span> --category Rust\n<span class="token punctuation">(</span>lldb<span class="token punctuation">)</span> <span class="token builtin class-name">type</span> category <span class="token builtin class-name">enable</span> Rust\n<span class="token punctuation">(</span>lldb<span class="token punctuation">)</span> target create <span class="token string">"../deno/target/debug/deno"</span>\nCurrent executable <span class="token builtin class-name">set</span> to <span class="token string">\'../deno/target/debug/deno\'</span> <span class="token punctuation">(</span>x86_64<span class="token punctuation">)</span>.\n<span class="token punctuation">(</span>lldb<span class="token punctuation">)</span> settings <span class="token builtin class-name">set</span> -- target.run-args  <span class="token string">"tests/http_bench.ts"</span> <span class="token string">"--allow-net"</span>\n<span class="token punctuation">(</span>lldb<span class="token punctuation">)</span> b op_start\n<span class="token punctuation">(</span>lldb<span class="token punctuation">)</span> r\n</code></pre>\n<h2 id="v8-%E9%80%89%E9%A1%B9">V8 选项<a class="anchor" href="#v8-%E9%80%89%E9%A1%B9">§</a></h2>\n<p>V8 有很多内部的命令行选项。</p>\n<pre class="language-shell"><code class="language-shell">$ deno run --v8-flags<span class="token operator">=</span>--help _\n<span class="token assign-left variable">SSE3</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">SSSE3</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">SSE4_1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">SSE4_2</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">SAHF</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">AVX</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">FMA3</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">BMI1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">BMI2</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">LZCNT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">POPCNT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ATOM</span><span class="token operator">=</span><span class="token number">0</span>\nSynopsis:\n  shell <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>--shell<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>file<span class="token operator">></span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>\n  d8 <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>-e <span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--shell<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>--module<span class="token punctuation">]</span> <span class="token operator">&lt;</span>file<span class="token operator">></span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>\n\n  -e        execute a string <span class="token keyword">in</span> V8\n  --shell   run an interactive JavaScript shell\n  --module  execute a <span class="token function">file</span> as a JavaScript module\n\nNote: the --module option is implicitly enabled <span class="token keyword">for</span> *.mjs files.\n\nThe following syntax <span class="token keyword">for</span> options is accepted <span class="token punctuation">(</span>both <span class="token string">\'-\'</span> and <span class="token string">\'--\'</span> are ok<span class="token punctuation">)</span>:\n  --flag        <span class="token punctuation">(</span>bool flags only<span class="token punctuation">)</span>\n  --no-flag     <span class="token punctuation">(</span>bool flags only<span class="token punctuation">)</span>\n  --flag<span class="token operator">=</span>value  <span class="token punctuation">(</span>non-bool flags only, no spaces around <span class="token string">\'=\'</span><span class="token punctuation">)</span>\n  --flag value  <span class="token punctuation">(</span>non-bool flags only<span class="token punctuation">)</span>\n  --            <span class="token punctuation">(</span>captures all remaining args <span class="token keyword">in</span> JavaScript<span class="token punctuation">)</span>\n\nOptions:\n  --use-strict <span class="token punctuation">(</span>enforce strict mode<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --es-staging <span class="token punctuation">(</span>enable test-worthy harmony features <span class="token punctuation">(</span>for internal use only<span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --harmony <span class="token punctuation">(</span>enable all completed harmony features<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --harmony-shipping <span class="token punctuation">(</span>enable all shipped harmony features<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --harmony-regexp-sequence <span class="token punctuation">(</span>enable <span class="token string">"RegExp Unicode sequence properties"</span> <span class="token punctuation">(</span>in progress<span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --harmony-weak-refs-with-cleanup-some <span class="token punctuation">(</span>enable <span class="token string">"harmony weak references with FinalizationRegistry.prototype.cleanupSome"</span> <span class="token punctuation">(</span>in progress<span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --harmony-regexp-match-indices <span class="token punctuation">(</span>enable <span class="token string">"harmony regexp match indices"</span> <span class="token punctuation">(</span>in progress<span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --harmony-top-level-await <span class="token punctuation">(</span>enable <span class="token string">"harmony top level await"</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --harmony-namespace-exports <span class="token punctuation">(</span>enable <span class="token string">"harmony namespace exports (export * as foo from \'bar\')"</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --harmony-sharedarraybuffer <span class="token punctuation">(</span>enable <span class="token string">"harmony sharedarraybuffer"</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --harmony-import-meta <span class="token punctuation">(</span>enable <span class="token string">"harmony import.meta property"</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --harmony-dynamic-import <span class="token punctuation">(</span>enable <span class="token string">"harmony dynamic import"</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --harmony-promise-all-settled <span class="token punctuation">(</span>enable <span class="token string">"harmony Promise.allSettled"</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --harmony-promise-any <span class="token punctuation">(</span>enable <span class="token string">"harmony Promise.any"</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --harmony-private-methods <span class="token punctuation">(</span>enable <span class="token string">"harmony private methods in class literals"</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --harmony-weak-refs <span class="token punctuation">(</span>enable <span class="token string">"harmony weak references"</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --harmony-string-replaceall <span class="token punctuation">(</span>enable <span class="token string">"harmony String.prototype.replaceAll"</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --harmony-logical-assignment <span class="token punctuation">(</span>enable <span class="token string">"harmony logical assignment"</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --lite-mode <span class="token punctuation">(</span>enables trade-off of performance <span class="token keyword">for</span> memory savings<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --future <span class="token punctuation">(</span>Implies all staged features that we want to ship <span class="token keyword">in</span> the not-too-far future<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --assert-types <span class="token punctuation">(</span>generate runtime <span class="token builtin class-name">type</span> assertions to <span class="token builtin class-name">test</span> the typer<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --allocation-site-pretenuring <span class="token punctuation">(</span>pretenure with allocation sites<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --page-promotion <span class="token punctuation">(</span>promote pages based on utilization<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --always-promote-young-mc <span class="token punctuation">(</span>always promote young objects during mark-compact<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --page-promotion-threshold <span class="token punctuation">(</span>min percentage of live bytes on a page to <span class="token builtin class-name">enable</span> fast evacuation<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">70</span>\n  --trace-pretenuring <span class="token punctuation">(</span>trace pretenuring decisions of HAllocate instructions<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-pretenuring-statistics <span class="token punctuation">(</span>trace allocation site pretenuring statistics<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --track-fields <span class="token punctuation">(</span>track fields with only smi values<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --track-double-fields <span class="token punctuation">(</span>track fields with double values<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --track-heap-object-fields <span class="token punctuation">(</span>track fields with heap values<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --track-computed-fields <span class="token punctuation">(</span>track computed boilerplate fields<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --track-field-types <span class="token punctuation">(</span>track field types<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --trace-block-coverage <span class="token punctuation">(</span>trace collected block coverage information<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-protector-invalidation <span class="token punctuation">(</span>trace protector cell invalidations<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --feedback-normalization <span class="token punctuation">(</span>feed back normalization to constructors<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --enable-one-shot-optimization <span class="token punctuation">(</span>Enable size optimizations <span class="token keyword">for</span> the code that will only be executed once<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --unbox-double-arrays <span class="token punctuation">(</span>automatically unbox arrays of doubles<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --interrupt-budget <span class="token punctuation">(</span>interrupt budget <span class="token function">which</span> should be used <span class="token keyword">for</span> the profiler counter<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">147456</span>\n  --jitless <span class="token punctuation">(</span>Disable runtime allocation of executable memory.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --use-ic <span class="token punctuation">(</span>use inline caching<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --budget-for-feedback-vector-allocation <span class="token punctuation">(</span>The budget <span class="token keyword">in</span> amount of bytecode executed by a <span class="token keyword">function</span> before we decide to allocate feedback vectors<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">1024</span>\n  --lazy-feedback-allocation <span class="token punctuation">(</span>Allocate feedback vectors lazily<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --ignition-elide-noneffectful-bytecodes <span class="token punctuation">(</span>elide bytecodes <span class="token function">which</span> won<span class="token string">\'t have any external effect)\n        type: bool  default: true\n  --ignition-reo (use ignition register equivalence optimizer)\n        type: bool  default: true\n  --ignition-filter-expression-positions (filter expression positions before the bytecode pipeline)\n        type: bool  default: true\n  --ignition-share-named-property-feedback (share feedback slots when loading the same named property from the same object)\n        type: bool  default: true\n  --print-bytecode (print bytecode generated by ignition interpreter)\n        type: bool  default: false\n  --enable-lazy-source-positions (skip generating source positions during initial compile but regenerate when actually required)\n        type: bool  default: true\n  --stress-lazy-source-positions (collect lazy source positions immediately after lazy compile)\n        type: bool  default: false\n  --print-bytecode-filter (filter for selecting which functions to print bytecode)\n        type: string  default: *\n  --trace-ignition-codegen (trace the codegen of ignition interpreter bytecode handlers)\n        type: bool  default: false\n  --trace-ignition-dispatches (traces the dispatches to bytecode handlers by the ignition interpreter)\n        type: bool  default: false\n  --trace-ignition-dispatches-output-file (the file to which the bytecode handler dispatch table is written (by default, the table is not written to a file))\n        type: string  default: nullptr\n  --fast-math (faster (but maybe less accurate) math functions)\n        type: bool  default: true\n  --trace-track-allocation-sites (trace the tracking of allocation sites)\n        type: bool  default: false\n  --trace-migration (trace object migration)\n        type: bool  default: false\n  --trace-generalization (trace map generalization)\n        type: bool  default: false\n  --turboprop (enable experimental turboprop mid-tier compiler.)\n        type: bool  default: false\n  --concurrent-recompilation (optimizing hot functions asynchronously on a separate thread)\n        type: bool  default: true\n  --trace-concurrent-recompilation (track concurrent recompilation)\n        type: bool  default: false\n  --concurrent-recompilation-queue-length (the length of the concurrent compilation queue)\n        type: int  default: 8\n  --concurrent-recompilation-delay (artificial compilation delay in ms)\n        type: int  default: 0\n  --block-concurrent-recompilation (block queued jobs until released)\n        type: bool  default: false\n  --concurrent-inlining (run optimizing compiler\'</span>s inlining phase on a separate thread<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --max-serializer-nesting <span class="token punctuation">(</span>maximum levels <span class="token keyword">for</span> nesting child serializers<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">25</span>\n  --trace-heap-broker-verbose <span class="token punctuation">(</span>trace the heap broker verbosely <span class="token punctuation">(</span>all reports<span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-heap-broker-memory <span class="token punctuation">(</span>trace the heap broker memory <span class="token punctuation">(</span>refs analysis and zone numbers<span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-heap-broker <span class="token punctuation">(</span>trace the heap broker <span class="token punctuation">(</span>reports on missing data only<span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --stress-runs <span class="token punctuation">(</span>number of stress runs<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">0</span>\n  --deopt-every-n-times <span class="token punctuation">(</span>deoptimize every n <span class="token builtin class-name">times</span> a deopt point is passed<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">0</span>\n  --print-deopt-stress <span class="token punctuation">(</span>print number of possible deopt points<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --opt <span class="token punctuation">(</span>use adaptive optimizations<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --turbo-sp-frame-access <span class="token punctuation">(</span>use stack pointer-relative access to frame wherever possible<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --turbo-control-flow-aware-allocation <span class="token punctuation">(</span>consider control flow <span class="token keyword">while</span> allocating registers<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --turbo-filter <span class="token punctuation">(</span>optimization filter <span class="token keyword">for</span> TurboFan compiler<span class="token punctuation">)</span>\n        type: string  default: *\n  --trace-turbo <span class="token punctuation">(</span>trace generated TurboFan IR<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-turbo-path <span class="token punctuation">(</span>directory to dump generated TurboFan IR to<span class="token punctuation">)</span>\n        type: string  default: nullptr\n  --trace-turbo-filter <span class="token punctuation">(</span>filter <span class="token keyword">for</span> tracing turbofan compilation<span class="token punctuation">)</span>\n        type: string  default: *\n  --trace-turbo-graph <span class="token punctuation">(</span>trace generated TurboFan graphs<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-turbo-scheduled <span class="token punctuation">(</span>trace TurboFan IR with schedule<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-turbo-cfg-file <span class="token punctuation">(</span>trace turbo cfg graph <span class="token punctuation">(</span>for C1 visualizer<span class="token punctuation">)</span> to a given <span class="token function">file</span> name<span class="token punctuation">)</span>\n        type: string  default: nullptr\n  --trace-turbo-types <span class="token punctuation">(</span>trace TurboFan<span class="token string">\'s types)\n        type: bool  default: true\n  --trace-turbo-scheduler (trace TurboFan\'</span>s scheduler<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-turbo-reduction <span class="token punctuation">(</span>trace TurboFan<span class="token string">\'s various reducers)\n        type: bool  default: false\n  --trace-turbo-trimming (trace TurboFan\'</span>s graph trimmer<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-turbo-jt <span class="token punctuation">(</span>trace TurboFan<span class="token string">\'s jump threading)\n        type: bool  default: false\n  --trace-turbo-ceq (trace TurboFan\'</span>s control equivalence<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-turbo-loop <span class="token punctuation">(</span>trace TurboFan<span class="token string">\'s loop optimizations)\n        type: bool  default: false\n  --trace-turbo-alloc (trace TurboFan\'</span>s register allocator<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-all-uses <span class="token punctuation">(</span>trace all use positions<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-representation <span class="token punctuation">(</span>trace representation types<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --turbo-verify <span class="token punctuation">(</span>verify TurboFan graphs at each phase<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --turbo-verify-machine-graph <span class="token punctuation">(</span>verify TurboFan machine graph before instruction selection<span class="token punctuation">)</span>\n        type: string  default: nullptr\n  --trace-verify-csa <span class="token punctuation">(</span>trace code stubs verification<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --csa-trap-on-node <span class="token punctuation">(</span>trigger <span class="token builtin class-name">break</span> point when a node with given <span class="token function">id</span> is created <span class="token keyword">in</span> given stub. The <span class="token function">format</span> is: StubName,NodeId<span class="token punctuation">)</span>\n        type: string  default: nullptr\n  --turbo-stats <span class="token punctuation">(</span>print TurboFan statistics<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --turbo-stats-nvp <span class="token punctuation">(</span>print TurboFan statistics <span class="token keyword">in</span> machine-readable <span class="token function">format</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --turbo-stats-wasm <span class="token punctuation">(</span>print TurboFan statistics of wasm compilations<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --turbo-splitting <span class="token punctuation">(</span>split nodes during scheduling <span class="token keyword">in</span> TurboFan<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --function-context-specialization <span class="token punctuation">(</span>enable <span class="token keyword">function</span> context specialization <span class="token keyword">in</span> TurboFan<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --turbo-inlining <span class="token punctuation">(</span>enable inlining <span class="token keyword">in</span> TurboFan<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --max-inlined-bytecode-size <span class="token punctuation">(</span>maximum size of bytecode <span class="token keyword">for</span> a single inlining<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">500</span>\n  --max-inlined-bytecode-size-cumulative <span class="token punctuation">(</span>maximum cumulative size of bytecode considered <span class="token keyword">for</span> inlining<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">1000</span>\n  --max-inlined-bytecode-size-absolute <span class="token punctuation">(</span>maximum cumulative size of bytecode considered <span class="token keyword">for</span> inlining<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">5000</span>\n  --reserve-inline-budget-scale-factor <span class="token punctuation">(</span>maximum cumulative size of bytecode considered <span class="token keyword">for</span> inlining<span class="token punctuation">)</span>\n        type: float  default: <span class="token number">1.2</span>\n  --max-inlined-bytecode-size-small <span class="token punctuation">(</span>maximum size of bytecode considered <span class="token keyword">for</span> small <span class="token keyword">function</span> inlining<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">30</span>\n  --max-optimized-bytecode-size <span class="token punctuation">(</span>maximum bytecode size to be considered <span class="token keyword">for</span> optimization<span class="token punctuation">;</span> too high values may cause the compiler to hit <span class="token punctuation">(</span>release<span class="token punctuation">)</span> assertions<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">61440</span>\n  --min-inlining-frequency <span class="token punctuation">(</span>minimum frequency <span class="token keyword">for</span> inlining<span class="token punctuation">)</span>\n        type: float  default: <span class="token number">0.15</span>\n  --polymorphic-inlining <span class="token punctuation">(</span>polymorphic inlining<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --stress-inline <span class="token punctuation">(</span>set high thresholds <span class="token keyword">for</span> inlining to inline as much as possible<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-turbo-inlining <span class="token punctuation">(</span>trace TurboFan inlining<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --turbo-inline-array-builtins <span class="token punctuation">(</span>inline array builtins <span class="token keyword">in</span> TurboFan code<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --use-osr <span class="token punctuation">(</span>use on-stack replacement<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --trace-osr <span class="token punctuation">(</span>trace on-stack replacement<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --analyze-environment-liveness <span class="token punctuation">(</span>analyze liveness of environment slots and zap dead values<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --trace-environment-liveness <span class="token punctuation">(</span>trace liveness of <span class="token builtin class-name">local</span> variable slots<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --turbo-load-elimination <span class="token punctuation">(</span>enable load elimination <span class="token keyword">in</span> TurboFan<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --trace-turbo-load-elimination <span class="token punctuation">(</span>trace TurboFan load elimination<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --turbo-profiling <span class="token punctuation">(</span>enable basic block profiling <span class="token keyword">in</span> TurboFan<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --turbo-profiling-verbose <span class="token punctuation">(</span>enable basic block profiling <span class="token keyword">in</span> TurboFan, and include each <span class="token keyword">function</span><span class="token string">\'s schedule and disassembly in the output)\n        type: bool  default: false\n  --turbo-verify-allocation (verify register allocation in TurboFan)\n        type: bool  default: false\n  --turbo-move-optimization (optimize gap moves in TurboFan)\n        type: bool  default: true\n  --turbo-jt (enable jump threading in TurboFan)\n        type: bool  default: true\n  --turbo-loop-peeling (Turbofan loop peeling)\n        type: bool  default: true\n  --turbo-loop-variable (Turbofan loop variable optimization)\n        type: bool  default: true\n  --turbo-loop-rotation (Turbofan loop rotation)\n        type: bool  default: true\n  --turbo-cf-optimization (optimize control flow in TurboFan)\n        type: bool  default: true\n  --turbo-escape (enable escape analysis)\n        type: bool  default: true\n  --turbo-allocation-folding (Turbofan allocation folding)\n        type: bool  default: true\n  --turbo-instruction-scheduling (enable instruction scheduling in TurboFan)\n        type: bool  default: false\n  --turbo-stress-instruction-scheduling (randomly schedule instructions to stress dependency tracking)\n        type: bool  default: false\n  --turbo-store-elimination (enable store-store elimination in TurboFan)\n        type: bool  default: true\n  --trace-store-elimination (trace store elimination)\n        type: bool  default: false\n  --turbo-rewrite-far-jumps (rewrite far to near jumps (ia32,x64))\n        type: bool  default: true\n  --stress-gc-during-compilation (simulate GC/compiler thread race related to <a class="token url-link" href="https://crbug.com/v8/8520">https://crbug.com/v8/8520</a>)\n        type: bool  default: false\n  --turbo-fast-api-calls (enable fast API calls from TurboFan)\n        type: bool  default: false\n  --reuse-opt-code-count (don\'</span>t discard optimized code <span class="token keyword">for</span> the specified number of deopts.<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">0</span>\n  --turbo-nci <span class="token punctuation">(</span>enable experimental native context independent code.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --turbo-nci-as-highest-tier <span class="token punctuation">(</span>replace default TF with NCI code as the highest tier <span class="token keyword">for</span> testing purposes.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --print-nci-code <span class="token punctuation">(</span>print native context independent code.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-turbo-nci <span class="token punctuation">(</span>trace native context independent code.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --turbo-collect-feedback-in-generic-lowering <span class="token punctuation">(</span>enable experimental feedback collection <span class="token keyword">in</span> generic lowering.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --optimize-for-size <span class="token punctuation">(</span>Enables optimizations <span class="token function">which</span> favor memory size over execution speed<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --untrusted-code-mitigations <span class="token punctuation">(</span>Enable mitigations <span class="token keyword">for</span> executing untrusted code<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --expose-wasm <span class="token punctuation">(</span>expose wasm interface to JavaScript<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --assume-asmjs-origin <span class="token punctuation">(</span>force wasm decoder to assume input is internal asm-wasm <span class="token function">format</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --wasm-num-compilation-tasks <span class="token punctuation">(</span>maximum number of parallel compilation tasks <span class="token keyword">for</span> wasm<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">128</span>\n  --wasm-write-protect-code-memory <span class="token punctuation">(</span>write protect code memory on the wasm native heap<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --wasm-async-compilation <span class="token punctuation">(</span>enable actual asynchronous compilation <span class="token keyword">for</span> WebAssembly.compile<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --wasm-test-streaming <span class="token punctuation">(</span>use streaming compilation instead of async compilation <span class="token keyword">for</span> tests<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --wasm-max-mem-pages <span class="token punctuation">(</span>maximum initial number of 64KiB memory pages of a wasm instance<span class="token punctuation">)</span>\n        type: uint  default: <span class="token number">32767</span>\n  --wasm-max-mem-pages-growth <span class="token punctuation">(</span>maximum number of 64KiB pages a Wasm memory can grow to<span class="token punctuation">)</span>\n        type: uint  default: <span class="token number">65536</span>\n  --wasm-max-table-size <span class="token punctuation">(</span>maximum table size of a wasm instance<span class="token punctuation">)</span>\n        type: uint  default: <span class="token number">10000000</span>\n  --wasm-max-code-space <span class="token punctuation">(</span>maximum committed code space <span class="token keyword">for</span> wasm <span class="token punctuation">(</span>in MB<span class="token punctuation">))</span>\n        type: uint  default: <span class="token number">1024</span>\n  --wasm-tier-up <span class="token punctuation">(</span>enable tier up to the optimizing compiler <span class="token punctuation">(</span>requires --liftoff to have an effect<span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --trace-wasm-ast-start <span class="token punctuation">(</span>start <span class="token keyword">function</span> <span class="token keyword">for</span> wasm AST trace <span class="token punctuation">(</span>inclusive<span class="token punctuation">))</span>\n        type: int  default: <span class="token number">0</span>\n  --trace-wasm-ast-end <span class="token punctuation">(</span>end <span class="token keyword">function</span> <span class="token keyword">for</span> wasm AST trace <span class="token punctuation">(</span>exclusive<span class="token punctuation">))</span>\n        type: int  default: <span class="token number">0</span>\n  --liftoff <span class="token punctuation">(</span>enable Liftoff, the baseline compiler <span class="token keyword">for</span> WebAssembly<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --trace-wasm-memory <span class="token punctuation">(</span>print all memory updates performed <span class="token keyword">in</span> wasm code<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --wasm-tier-mask-for-testing <span class="token punctuation">(</span>bitmask of functions to compile with TurboFan instead of Liftoff<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">0</span>\n  --wasm-expose-debug-eval <span class="token punctuation">(</span>Expose wasm evaluator support on the CDP<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --validate-asm <span class="token punctuation">(</span>validate asm.js modules before compiling<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --suppress-asm-messages <span class="token punctuation">(</span>don<span class="token string">\'t emit asm.js related messages (for golden file testing))\n        type: bool  default: false\n  --trace-asm-time (log asm.js timing info to the console)\n        type: bool  default: false\n  --trace-asm-scanner (log tokens encountered by asm.js scanner)\n        type: bool  default: false\n  --trace-asm-parser (verbose logging of asm.js parse failures)\n        type: bool  default: false\n  --stress-validate-asm (try to validate everything as asm.js)\n        type: bool  default: false\n  --dump-wasm-module-path (directory to dump wasm modules to)\n        type: string  default: nullptr\n  --experimental-wasm-eh (enable prototype exception handling opcodes for wasm)\n        type: bool  default: false\n  --experimental-wasm-simd (enable prototype SIMD opcodes for wasm)\n        type: bool  default: false\n  --experimental-wasm-return-call (enable prototype return call opcodes for wasm)\n        type: bool  default: false\n  --experimental-wasm-compilation-hints (enable prototype compilation hints section for wasm)\n        type: bool  default: false\n  --experimental-wasm-gc (enable prototype garbage collection for wasm)\n        type: bool  default: false\n  --experimental-wasm-typed-funcref (enable prototype typed function references for wasm)\n        type: bool  default: false\n  --experimental-wasm-reftypes (enable prototype reference type opcodes for wasm)\n        type: bool  default: false\n  --experimental-wasm-threads (enable prototype thread opcodes for wasm)\n        type: bool  default: false\n  --experimental-wasm-type-reflection (enable prototype wasm type reflection in JS for wasm)\n        type: bool  default: false\n  --experimental-wasm-bigint (enable prototype JS BigInt support for wasm)\n        type: bool  default: true\n  --experimental-wasm-bulk-memory (enable prototype bulk memory opcodes for wasm)\n        type: bool  default: true\n  --experimental-wasm-mv (enable prototype multi-value support for wasm)\n        type: bool  default: true\n  --wasm-staging (enable staged wasm features)\n        type: bool  default: false\n  --wasm-opt (enable wasm optimization)\n        type: bool  default: false\n  --wasm-bounds-checks (enable bounds checks (disable for performance testing only))\n        type: bool  default: true\n  --wasm-stack-checks (enable stack checks (disable for performance testing only))\n        type: bool  default: true\n  --wasm-math-intrinsics (intrinsify some Math imports into wasm)\n        type: bool  default: true\n  --wasm-trap-handler (use signal handlers to catch out of bounds memory access in wasm (currently Linux x86_64 only))\n        type: bool  default: true\n  --wasm-fuzzer-gen-test (generate a test case when running a wasm fuzzer)\n        type: bool  default: false\n  --print-wasm-code (Print WebAssembly code)\n        type: bool  default: false\n  --print-wasm-stub-code (Print WebAssembly stub code)\n        type: bool  default: false\n  --asm-wasm-lazy-compilation (enable lazy compilation for asm-wasm modules)\n        type: bool  default: false\n  --wasm-lazy-compilation (enable lazy compilation for all wasm modules)\n        type: bool  default: false\n  --wasm-lazy-validation (enable lazy validation for lazily compiled wasm functions)\n        type: bool  default: false\n  --wasm-atomics-on-non-shared-memory (allow atomic operations on non-shared WebAssembly memory)\n        type: bool  default: true\n  --wasm-grow-shared-memory (allow growing shared WebAssembly memory objects)\n        type: bool  default: true\n  --wasm-simd-post-mvp (allow experimental SIMD operations for prototyping that are not included in the current proposal)\n        type: bool  default: false\n  --wasm-code-gc (enable garbage collection of wasm code)\n        type: bool  default: true\n  --trace-wasm-code-gc (trace garbage collection of wasm code)\n        type: bool  default: false\n  --stress-wasm-code-gc (stress test garbage collection of wasm code)\n        type: bool  default: false\n  --wasm-max-initial-code-space-reservation (maximum size of the initial wasm code space reservation (in MB))\n        type: int  default: 0\n  --frame-count (number of stack frames inspected by the profiler)\n        type: int  default: 1\n  --stress-sampling-allocation-profiler (Enables sampling allocation profiler with X as a sample interval)\n        type: int  default: 0\n  --lazy-new-space-shrinking (Enables the lazy new space shrinking strategy)\n        type: bool  default: false\n  --min-semi-space-size (min size of a semi-space (in MBytes), the new space consists of two semi-spaces)\n        type: size_t  default: 0\n  --max-semi-space-size (max size of a semi-space (in MBytes), the new space consists of two semi-spaces)\n        type: size_t  default: 0\n  --semi-space-growth-factor (factor by which to grow the new space)\n        type: int  default: 2\n  --max-old-space-size (max size of the old space (in Mbytes))\n        type: size_t  default: 0\n  --max-heap-size (max size of the heap (in Mbytes) both max_semi_space_size and max_old_space_size take precedence. All three flags cannot be specified at the same time.)\n        type: size_t  default: 0\n  --initial-heap-size (initial size of the heap (in Mbytes))\n        type: size_t  default: 0\n  --huge-max-old-generation-size (Increase max size of the old space to 4 GB for x64 systems withthe physical memory bigger than 16 GB)\n        type: bool  default: true\n  --initial-old-space-size (initial old space size (in Mbytes))\n        type: size_t  default: 0\n  --global-gc-scheduling (enable GC scheduling based on global memory)\n        type: bool  default: true\n  --gc-global (always perform global GCs)\n        type: bool  default: false\n  --random-gc-interval (Collect garbage after random(0, X) allocations. It overrides gc_interval.)\n        type: int  default: 0\n  --gc-interval (garbage collect after &lt;n> allocations)\n        type: int  default: -1\n  --retain-maps-for-n-gc (keeps maps alive for &lt;n> old space garbage collections)\n        type: int  default: 2\n  --trace-gc (print one trace line following each garbage collection)\n        type: bool  default: false\n  --trace-gc-nvp (print one detailed trace line in name=value format after each garbage collection)\n        type: bool  default: false\n  --trace-gc-ignore-scavenger (do not print trace line after scavenger collection)\n        type: bool  default: false\n  --trace-idle-notification (print one trace line following each idle notification)\n        type: bool  default: false\n  --trace-idle-notification-verbose (prints the heap state used by the idle notification)\n        type: bool  default: false\n  --trace-gc-verbose (print more details following each garbage collection)\n        type: bool  default: false\n  --trace-gc-freelists (prints details of each freelist before and after each major garbage collection)\n        type: bool  default: false\n  --trace-gc-freelists-verbose (prints details of freelists of each page before and after each major garbage collection)\n        type: bool  default: false\n  --trace-evacuation-candidates (Show statistics about the pages evacuation by the compaction)\n        type: bool  default: false\n  --trace-allocations-origins (Show statistics about the origins of allocations. Combine with --no-inline-new to track allocations from generated code)\n        type: bool  default: false\n  --trace-allocation-stack-interval (print stack trace after &lt;n> free-list allocations)\n        type: int  default: -1\n  --trace-duplicate-threshold-kb (print duplicate objects in the heap if their size is more than given threshold)\n        type: int  default: 0\n  --trace-fragmentation (report fragmentation for old space)\n        type: bool  default: false\n  --trace-fragmentation-verbose (report fragmentation for old space (detailed))\n        type: bool  default: false\n  --minor-mc-trace-fragmentation (trace fragmentation after marking)\n        type: bool  default: false\n  --trace-evacuation (report evacuation statistics)\n        type: bool  default: false\n  --trace-mutator-utilization (print mutator utilization, allocation speed, gc speed)\n        type: bool  default: false\n  --incremental-marking (use incremental marking)\n        type: bool  default: true\n  --incremental-marking-wrappers (use incremental marking for marking wrappers)\n        type: bool  default: true\n  --incremental-marking-task (use tasks for incremental marking)\n        type: bool  default: true\n  --incremental-marking-soft-trigger (threshold for starting incremental marking via a task in percent of available space: limit - size)\n        type: int  default: 0\n  --incremental-marking-hard-trigger (threshold for starting incremental marking immediately in percent of available space: limit - size)\n        type: int  default: 0\n  --trace-unmapper (Trace the unmapping)\n        type: bool  default: false\n  --parallel-scavenge (parallel scavenge)\n        type: bool  default: true\n  --scavenge-task (schedule scavenge tasks)\n        type: bool  default: true\n  --scavenge-task-trigger (scavenge task trigger in percent of the current heap limit)\n        type: int  default: 80\n  --scavenge-separate-stack-scanning (use a separate phase for stack scanning in scavenge)\n        type: bool  default: false\n  --trace-parallel-scavenge (trace parallel scavenge)\n        type: bool  default: false\n  --write-protect-code-memory (write protect code memory)\n        type: bool  default: true\n  --concurrent-marking (use concurrent marking)\n        type: bool  default: true\n  --concurrent-array-buffer-sweeping (concurrently sweep array buffers)\n        type: bool  default: true\n  --concurrent-allocation (concurrently allocate in old space)\n        type: bool  default: false\n  --local-heaps (allow heap access from background tasks)\n        type: bool  default: false\n  --stress-concurrent-allocation (start background threads that allocate memory)\n        type: bool  default: false\n  --parallel-marking (use parallel marking in atomic pause)\n        type: bool  default: true\n  --ephemeron-fixpoint-iterations (number of fixpoint iterations it takes to switch to linear ephemeron algorithm)\n        type: int  default: 10\n  --trace-concurrent-marking (trace concurrent marking)\n        type: bool  default: false\n  --concurrent-store-buffer (use concurrent store buffer processing)\n        type: bool  default: true\n  --concurrent-sweeping (use concurrent sweeping)\n        type: bool  default: true\n  --parallel-compaction (use parallel compaction)\n        type: bool  default: true\n  --parallel-pointer-update (use parallel pointer update during compaction)\n        type: bool  default: true\n  --detect-ineffective-gcs-near-heap-limit (trigger out-of-memory failure to avoid GC storm near heap limit)\n        type: bool  default: true\n  --trace-incremental-marking (trace progress of the incremental marking)\n        type: bool  default: false\n  --trace-stress-marking (trace stress marking progress)\n        type: bool  default: false\n  --trace-stress-scavenge (trace stress scavenge progress)\n        type: bool  default: false\n  --track-gc-object-stats (track object counts and memory usage)\n        type: bool  default: false\n  --trace-gc-object-stats (trace object counts and memory usage)\n        type: bool  default: false\n  --trace-zone-stats (trace zone memory usage)\n        type: bool  default: false\n  --zone-stats-tolerance (report a tick only when allocated zone memory changes by this amount)\n        type: size_t  default: 1048576\n  --track-retaining-path (enable support for tracking retaining path)\n        type: bool  default: false\n  --concurrent-array-buffer-freeing (free array buffer allocations on a background thread)\n        type: bool  default: true\n  --gc-stats (Used by tracing internally to enable gc statistics)\n        type: int  default: 0\n  --track-detached-contexts (track native contexts that are expected to be garbage collected)\n        type: bool  default: true\n  --trace-detached-contexts (trace native contexts that are expected to be garbage collected)\n        type: bool  default: false\n  --move-object-start (enable moving of object starts)\n        type: bool  default: true\n  --memory-reducer (use memory reducer)\n        type: bool  default: true\n  --memory-reducer-for-small-heaps (use memory reducer for small heaps)\n        type: bool  default: true\n  --heap-growing-percent (specifies heap growing factor as (1 + heap_growing_percent/100))\n        type: int  default: 0\n  --v8-os-page-size (override OS page size (in KBytes))\n        type: int  default: 0\n  --always-compact (Perform compaction on every full GC)\n        type: bool  default: false\n  --never-compact (Never perform compaction on full GC - testing only)\n        type: bool  default: false\n  --compact-code-space (Compact code space on full collections)\n        type: bool  default: true\n  --flush-bytecode (flush of bytecode when it has not been executed recently)\n        type: bool  default: true\n  --stress-flush-bytecode (stress bytecode flushing)\n        type: bool  default: false\n  --use-marking-progress-bar (Use a progress bar to scan large objects in increments when incremental marking is active.)\n        type: bool  default: true\n  --stress-per-context-marking-worklist (Use per-context worklist for marking)\n        type: bool  default: false\n  --force-marking-deque-overflows (force overflows of marking deque by reducing it\'</span>s size to <span class="token number">64</span> words<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --stress-compaction <span class="token punctuation">(</span>stress the GC compactor to flush out bugs <span class="token punctuation">(</span>implies --force_marking_deque_overflows<span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --stress-compaction-random <span class="token punctuation">(</span>Stress GC compaction by selecting random percent of pages as evacuation candidates. It overrides stress_compaction.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --stress-incremental-marking <span class="token punctuation">(</span>force incremental marking <span class="token keyword">for</span> small heaps and run it <span class="token function">more</span> often<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --fuzzer-gc-analysis <span class="token punctuation">(</span>prints number of allocations and enables analysis mode <span class="token keyword">for</span> gc fuzz testing, e.g. --stress-marking, --stress-scavenge<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --stress-marking <span class="token punctuation">(</span>force marking at random points between <span class="token number">0</span> and X <span class="token punctuation">(</span>inclusive<span class="token punctuation">)</span> percent of the regular marking start limit<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">0</span>\n  --stress-scavenge <span class="token punctuation">(</span>force scavenge at random points between <span class="token number">0</span> and X <span class="token punctuation">(</span>inclusive<span class="token punctuation">)</span> percent of the new space capacity<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">0</span>\n  --gc-experiment-background-schedule <span class="token punctuation">(</span>new background GC schedule heuristics<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --gc-experiment-less-compaction <span class="token punctuation">(</span>less compaction <span class="token keyword">in</span> non-memory reducing mode<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --disable-abortjs <span class="token punctuation">(</span>disables AbortJS runtime <span class="token keyword">function</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --randomize-all-allocations <span class="token punctuation">(</span>randomize virtual memory reservations by ignoring any hints passed when allocating pages<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --manual-evacuation-candidates-selection <span class="token punctuation">(</span>Test mode only flag. It allows an unit <span class="token builtin class-name">test</span> to <span class="token keyword">select</span> evacuation candidates pages <span class="token punctuation">(</span>requires --stress_compaction<span class="token punctuation">)</span>.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --fast-promotion-new-space <span class="token punctuation">(</span>fast promote new space on high survival rates<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --clear-free-memory <span class="token punctuation">(</span>initialize <span class="token function">free</span> memory with <span class="token number">0</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --young-generation-large-objects <span class="token punctuation">(</span>allocates large objects by default <span class="token keyword">in</span> the young generation large object space<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --debug-code <span class="token punctuation">(</span>generate extra code <span class="token punctuation">(</span>assertions<span class="token punctuation">)</span> <span class="token keyword">for</span> debugging<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --code-comments <span class="token punctuation">(</span>emit comments <span class="token keyword">in</span> code disassembly<span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token function">more</span> readable <span class="token builtin class-name">source</span> positions you should <span class="token function">add</span> --no-concurrent_recompilation<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --enable-sse3 <span class="token punctuation">(</span>enable use of SSE3 instructions <span class="token keyword">if</span> available<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --enable-ssse3 <span class="token punctuation">(</span>enable use of SSSE3 instructions <span class="token keyword">if</span> available<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --enable-sse4-1 <span class="token punctuation">(</span>enable use of SSE4.1 instructions <span class="token keyword">if</span> available<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --enable-sse4-2 <span class="token punctuation">(</span>enable use of SSE4.2 instructions <span class="token keyword">if</span> available<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --enable-sahf <span class="token punctuation">(</span>enable use of SAHF instruction <span class="token keyword">if</span> available <span class="token punctuation">(</span>X64 only<span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --enable-avx <span class="token punctuation">(</span>enable use of AVX instructions <span class="token keyword">if</span> available<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --enable-fma3 <span class="token punctuation">(</span>enable use of FMA3 instructions <span class="token keyword">if</span> available<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --enable-bmi1 <span class="token punctuation">(</span>enable use of BMI1 instructions <span class="token keyword">if</span> available<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --enable-bmi2 <span class="token punctuation">(</span>enable use of BMI2 instructions <span class="token keyword">if</span> available<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --enable-lzcnt <span class="token punctuation">(</span>enable use of LZCNT instruction <span class="token keyword">if</span> available<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --enable-popcnt <span class="token punctuation">(</span>enable use of POPCNT instruction <span class="token keyword">if</span> available<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --arm-arch <span class="token punctuation">(</span>generate instructions <span class="token keyword">for</span> the selected ARM architecture <span class="token keyword">if</span> available: armv6, armv7, armv7+sudiv or armv8<span class="token punctuation">)</span>\n        type: string  default: armv8\n  --force-long-branches <span class="token punctuation">(</span>force all emitted branches to be <span class="token keyword">in</span> long mode <span class="token punctuation">(</span>MIPS/PPC only<span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --mcpu <span class="token punctuation">(</span>enable optimization <span class="token keyword">for</span> specific cpu<span class="token punctuation">)</span>\n        type: string  default: auto\n  --partial-constant-pool <span class="token punctuation">(</span>enable use of partial constant pools <span class="token punctuation">(</span>X64 only<span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --sim-arm64-optional-features <span class="token punctuation">(</span>enable optional features on the simulator <span class="token keyword">for</span> testing: none or all<span class="token punctuation">)</span>\n        type: string  default: none\n  --enable-source-at-csa-bind <span class="token punctuation">(</span>Include <span class="token builtin class-name">source</span> information <span class="token keyword">in</span> the binary at CSA <span class="token builtin class-name">bind</span> locations.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --enable-armv7 <span class="token punctuation">(</span>deprecated <span class="token punctuation">(</span>use --arm_arch instead<span class="token punctuation">))</span>\n        type: maybe_bool  default: <span class="token builtin class-name">unset</span>\n  --enable-vfp3 <span class="token punctuation">(</span>deprecated <span class="token punctuation">(</span>use --arm_arch instead<span class="token punctuation">))</span>\n        type: maybe_bool  default: <span class="token builtin class-name">unset</span>\n  --enable-32dregs <span class="token punctuation">(</span>deprecated <span class="token punctuation">(</span>use --arm_arch instead<span class="token punctuation">))</span>\n        type: maybe_bool  default: <span class="token builtin class-name">unset</span>\n  --enable-neon <span class="token punctuation">(</span>deprecated <span class="token punctuation">(</span>use --arm_arch instead<span class="token punctuation">))</span>\n        type: maybe_bool  default: <span class="token builtin class-name">unset</span>\n  --enable-sudiv <span class="token punctuation">(</span>deprecated <span class="token punctuation">(</span>use --arm_arch instead<span class="token punctuation">))</span>\n        type: maybe_bool  default: <span class="token builtin class-name">unset</span>\n  --enable-armv8 <span class="token punctuation">(</span>deprecated <span class="token punctuation">(</span>use --arm_arch instead<span class="token punctuation">))</span>\n        type: maybe_bool  default: <span class="token builtin class-name">unset</span>\n  --enable-regexp-unaligned-accesses <span class="token punctuation">(</span>enable unaligned accesses <span class="token keyword">for</span> the regexp engine<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --script-streaming <span class="token punctuation">(</span>enable parsing on background<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --stress-background-compile <span class="token punctuation">(</span>stress <span class="token builtin class-name">test</span> parsing on background<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --finalize-streaming-on-background <span class="token punctuation">(</span>perform the script streaming finalization on the background thread<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --disable-old-api-accessors <span class="token punctuation">(</span>Disable old-style API accessors whose setters trigger through the prototype chain<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --expose-gc <span class="token punctuation">(</span>expose gc extension<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --expose-gc-as <span class="token punctuation">(</span>expose gc extension under the specified name<span class="token punctuation">)</span>\n        type: string  default: nullptr\n  --expose-externalize-string <span class="token punctuation">(</span>expose externalize string extension<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --expose-trigger-failure <span class="token punctuation">(</span>expose trigger-failure extension<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --stack-trace-limit <span class="token punctuation">(</span>number of stack frames to capture<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">10</span>\n  --builtins-in-stack-traces <span class="token punctuation">(</span>show built-in functions <span class="token keyword">in</span> stack traces<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --experimental-stack-trace-frames <span class="token punctuation">(</span>enable experimental frames <span class="token punctuation">(</span>API/Builtins<span class="token punctuation">)</span> and stack trace layout<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --disallow-code-generation-from-strings <span class="token punctuation">(</span>disallow <span class="token builtin class-name">eval</span> and friends<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --expose-async-hooks <span class="token punctuation">(</span>expose async_hooks object<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --expose-cputracemark-as <span class="token punctuation">(</span>expose cputracemark extension under the specified name<span class="token punctuation">)</span>\n        type: string  default: nullptr\n  --allow-unsafe-function-constructor <span class="token punctuation">(</span>allow invoking the <span class="token keyword">function</span> constructor without security checks<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --force-slow-path <span class="token punctuation">(</span>always take the slow path <span class="token keyword">for</span> builtins<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --test-small-max-function-context-stub-size <span class="token punctuation">(</span>enable testing the <span class="token keyword">function</span> context size overflow path by making the maximum size smaller<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --inline-new <span class="token punctuation">(</span>use fast inline allocation<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --trace <span class="token punctuation">(</span>trace javascript <span class="token keyword">function</span> calls<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-wasm <span class="token punctuation">(</span>trace wasm <span class="token keyword">function</span> calls<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --lazy <span class="token punctuation">(</span>use lazy compilation<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --max-lazy <span class="token punctuation">(</span>ignore eager compilation hints<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-opt <span class="token punctuation">(</span>trace lazy optimization<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-opt-verbose <span class="token punctuation">(</span>extra verbose compilation tracing<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-opt-stats <span class="token punctuation">(</span>trace lazy optimization statistics<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-deopt <span class="token punctuation">(</span>trace optimize <span class="token keyword">function</span> deoptimization<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-file-names <span class="token punctuation">(</span>include <span class="token function">file</span> names <span class="token keyword">in</span> trace-opt/trace-deopt output<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --always-opt <span class="token punctuation">(</span>always try to optimize functions<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --always-osr <span class="token punctuation">(</span>always try to OSR functions<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --prepare-always-opt <span class="token punctuation">(</span>prepare <span class="token keyword">for</span> turning on always opt<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-serializer <span class="token punctuation">(</span>print code serializer trace<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --compilation-cache <span class="token punctuation">(</span>enable compilation cache<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --cache-prototype-transitions <span class="token punctuation">(</span>cache prototype transitions<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --parallel-compile-tasks <span class="token punctuation">(</span>enable parallel compile tasks<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --compiler-dispatcher <span class="token punctuation">(</span>enable compiler dispatcher<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-compiler-dispatcher <span class="token punctuation">(</span>trace compiler dispatcher activity<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --cpu-profiler-sampling-interval <span class="token punctuation">(</span>CPU profiler sampling interval <span class="token keyword">in</span> microseconds<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">1000</span>\n  --trace-side-effect-free-debug-evaluate <span class="token punctuation">(</span>print debug messages <span class="token keyword">for</span> side-effect-free debug-evaluate <span class="token keyword">for</span> testing<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --hard-abort <span class="token punctuation">(</span>abort by crashing<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --expose-inspector-scripts <span class="token punctuation">(</span>expose injected-script-source.js <span class="token keyword">for</span> debugging<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --stack-size <span class="token punctuation">(</span>default size of stack region v8 is allowed to use <span class="token punctuation">(</span>in kBytes<span class="token punctuation">))</span>\n        type: int  default: <span class="token number">984</span>\n  --max-stack-trace-source-length <span class="token punctuation">(</span>maximum length of <span class="token keyword">function</span> <span class="token builtin class-name">source</span> code printed <span class="token keyword">in</span> a stack trace.<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">300</span>\n  --clear-exceptions-on-js-entry <span class="token punctuation">(</span>clear pending exceptions when entering JavaScript<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --histogram-interval <span class="token punctuation">(</span>time interval <span class="token keyword">in</span> ms <span class="token keyword">for</span> aggregating memory histograms<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">600000</span>\n  --heap-profiler-trace-objects <span class="token punctuation">(</span>Dump heap object allocations/movements/size_updates<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --heap-profiler-use-embedder-graph <span class="token punctuation">(</span>Use the new EmbedderGraph API to get embedder nodes<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --heap-snapshot-string-limit <span class="token punctuation">(</span>truncate strings to this length <span class="token keyword">in</span> the heap snapshot<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">1024</span>\n  --sampling-heap-profiler-suppress-randomness <span class="token punctuation">(</span>Use constant sample intervals to eliminate <span class="token builtin class-name">test</span> flakiness<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --use-idle-notification <span class="token punctuation">(</span>Use idle notification to reduce memory footprint.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --trace-ic <span class="token punctuation">(</span>trace inline cache state transitions <span class="token keyword">for</span> tools/ic-processor<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --modify-field-representation-inplace <span class="token punctuation">(</span>enable in-place field representation updates<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --max-polymorphic-map-count <span class="token punctuation">(</span>maximum number of maps to track <span class="token keyword">in</span> POLYMORPHIC state<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">4</span>\n  --native-code-counters <span class="token punctuation">(</span>generate extra code <span class="token keyword">for</span> manipulating stats counters<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --thin-strings <span class="token punctuation">(</span>Enable ThinString support<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --trace-prototype-users <span class="token punctuation">(</span>Trace updates to prototype user tracking<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-for-in-enumerate <span class="token punctuation">(</span>Trace for-in enumerate slow-paths<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-maps <span class="token punctuation">(</span>trace map creation<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-maps-details <span class="token punctuation">(</span>also log map details<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --allow-natives-syntax <span class="token punctuation">(</span>allow natives syntax<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --allow-natives-for-differential-fuzzing <span class="token punctuation">(</span>allow only natives explicitly allowlisted <span class="token keyword">for</span> differential fuzzers<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --parse-only <span class="token punctuation">(</span>only parse the sources<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-sim <span class="token punctuation">(</span>Trace simulator execution<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --debug-sim <span class="token punctuation">(</span>Enable debugging the simulator<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --check-icache <span class="token punctuation">(</span>Check icache flushes <span class="token keyword">in</span> ARM and MIPS simulator<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --stop-sim-at <span class="token punctuation">(</span>Simulator stop after x number of instructions<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">0</span>\n  --sim-stack-alignment <span class="token punctuation">(</span>Stack alingment <span class="token keyword">in</span> bytes <span class="token keyword">in</span> simulator <span class="token punctuation">(</span><span class="token number">4</span> or <span class="token number">8</span>, <span class="token number">8</span> is default<span class="token punctuation">))</span>\n        type: int  default: <span class="token number">8</span>\n  --sim-stack-size <span class="token punctuation">(</span>Stack size of the ARM64, MIPS64 and PPC64 simulator <span class="token keyword">in</span> kBytes <span class="token punctuation">(</span>default is <span class="token number">2</span> MB<span class="token punctuation">))</span>\n        type: int  default: <span class="token number">2048</span>\n  --log-colour <span class="token punctuation">(</span>When logging, try to use coloured output.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --trace-sim-messages <span class="token punctuation">(</span>Trace simulator debug messages. Implied by --trace-sim.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --async-stack-traces <span class="token punctuation">(</span>include async stack traces <span class="token keyword">in</span> Error.stack<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --stack-trace-on-illegal <span class="token punctuation">(</span>print stack trace when an illegal exception is thrown<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --abort-on-uncaught-exception <span class="token punctuation">(</span>abort program <span class="token punctuation">(</span>dump core<span class="token punctuation">)</span> when an uncaught exception is thrown<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --correctness-fuzzer-suppressions <span class="token punctuation">(</span>Suppress certain unspecified behaviors to ease correctness fuzzing: Abort program when the stack overflows or a string exceeds maximum length <span class="token punctuation">(</span>as opposed to throwing RangeError<span class="token punctuation">)</span>. Use a fixed suppression string <span class="token keyword">for</span> error messages.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --randomize-hashes <span class="token punctuation">(</span>randomize hashes to avoid predictable <span class="token builtin class-name">hash</span> collisions <span class="token punctuation">(</span>with snapshots this option cannot override the baked-in seed<span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --rehash-snapshot <span class="token punctuation">(</span>rehash strings from the snapshot to override the baked-in seed<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --hash-seed <span class="token punctuation">(</span>Fixed seed to use to <span class="token builtin class-name">hash</span> property keys <span class="token punctuation">(</span><span class="token number">0</span> means random<span class="token punctuation">)</span><span class="token punctuation">(</span>with snapshots this option cannot override the baked-in seed<span class="token punctuation">))</span>\n        type: uint64  default: <span class="token number">0</span>\n  --random-seed <span class="token punctuation">(</span>Default seed <span class="token keyword">for</span> initializing random generator <span class="token punctuation">(</span><span class="token number">0</span>, the default, means to use system random<span class="token punctuation">)</span>.<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">0</span>\n  --fuzzer-random-seed <span class="token punctuation">(</span>Default seed <span class="token keyword">for</span> initializing fuzzer random generator <span class="token punctuation">(</span><span class="token number">0</span>, the default, means to use v8\'s random number generator seed<span class="token punctuation">)</span>.<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">0</span>\n  --trace-rail <span class="token punctuation">(</span>trace RAIL mode<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --print-all-exceptions <span class="token punctuation">(</span>print exception object and stack trace on each thrown exception<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --detailed-error-stack-trace <span class="token punctuation">(</span>includes arguments <span class="token keyword">for</span> each <span class="token keyword">function</span> call <span class="token keyword">in</span> the error stack frames array<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --adjust-os-scheduling-parameters <span class="token punctuation">(</span>adjust OS specific scheduling params <span class="token keyword">for</span> the isolate<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --runtime-call-stats <span class="token punctuation">(</span>report runtime call counts and <span class="token builtin class-name">times</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --rcs <span class="token punctuation">(</span>report runtime call counts and <span class="token builtin class-name">times</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --rcs-cpu-time <span class="token punctuation">(</span>report runtime <span class="token builtin class-name">times</span> <span class="token keyword">in</span> cpu <span class="token function">time</span> <span class="token punctuation">(</span>the default is wall <span class="token function">time</span><span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --profile-deserialization <span class="token punctuation">(</span>Print the <span class="token function">time</span> it takes to deserialize the snapshot.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --serialization-statistics <span class="token punctuation">(</span>Collect statistics on serialized objects.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --serialization-chunk-size <span class="token punctuation">(</span>Custom size <span class="token keyword">for</span> serialization chunks<span class="token punctuation">)</span>\n        type: uint  default: <span class="token number">4096</span>\n  --regexp-optimization <span class="token punctuation">(</span>generate optimized regexp code<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --regexp-mode-modifiers <span class="token punctuation">(</span>enable inline flags <span class="token keyword">in</span> regexp.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --regexp-interpret-all <span class="token punctuation">(</span>interpret all regexp code<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --regexp-tier-up <span class="token punctuation">(</span>enable regexp interpreter and tier up to the compiler after the number of executions <span class="token builtin class-name">set</span> by the tier up ticks flag<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --regexp-tier-up-ticks <span class="token punctuation">(</span>set the number of executions <span class="token keyword">for</span> the regexp interpreter before tiering-up to the compiler<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">1</span>\n  --regexp-peephole-optimization <span class="token punctuation">(</span>enable peephole optimization <span class="token keyword">for</span> regexp bytecode<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --trace-regexp-peephole-optimization <span class="token punctuation">(</span>trace regexp bytecode peephole optimization<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-regexp-bytecodes <span class="token punctuation">(</span>trace regexp bytecode execution<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-regexp-assembler <span class="token punctuation">(</span>trace regexp macro assembler calls.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-regexp-parser <span class="token punctuation">(</span>trace regexp parsing<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --trace-regexp-tier-up <span class="token punctuation">(</span>trace regexp tiering up execution<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --testing-bool-flag <span class="token punctuation">(</span>testing_bool_flag<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --testing-maybe-bool-flag <span class="token punctuation">(</span>testing_maybe_bool_flag<span class="token punctuation">)</span>\n        type: maybe_bool  default: <span class="token builtin class-name">unset</span>\n  --testing-int-flag <span class="token punctuation">(</span>testing_int_flag<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">13</span>\n  --testing-float-flag <span class="token punctuation">(</span>float-flag<span class="token punctuation">)</span>\n        type: float  default: <span class="token number">2.5</span>\n  --testing-string-flag <span class="token punctuation">(</span>string-flag<span class="token punctuation">)</span>\n        type: string  default: Hello, world<span class="token operator">!</span>\n  --testing-prng-seed <span class="token punctuation">(</span>Seed used <span class="token keyword">for</span> threading <span class="token builtin class-name">test</span> randomness<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">42</span>\n  --testing-d8-test-runner <span class="token punctuation">(</span>test runner turns on this flag to <span class="token builtin class-name">enable</span> a check that the <span class="token keyword">function</span> was prepared <span class="token keyword">for</span> optimization before marking it <span class="token keyword">for</span> optimization<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --fuzzing <span class="token punctuation">(</span>Fuzzers use this flag to signal that they are <span class="token punctuation">..</span>. fuzzing. This causes intrinsics to fail silently <span class="token punctuation">(</span>e.g. <span class="token builtin class-name">return</span> undefined<span class="token punctuation">)</span> on invalid usage.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --embedded-src <span class="token punctuation">(</span>Path <span class="token keyword">for</span> the generated embedded data file. <span class="token punctuation">(</span>mksnapshot only<span class="token punctuation">))</span>\n        type: string  default: nullptr\n  --embedded-variant <span class="token punctuation">(</span>Label to disambiguate symbols <span class="token keyword">in</span> embedded data file. <span class="token punctuation">(</span>mksnapshot only<span class="token punctuation">))</span>\n        type: string  default: nullptr\n  --startup-src <span class="token punctuation">(</span>Write V8 startup as C++ src. <span class="token punctuation">(</span>mksnapshot only<span class="token punctuation">))</span>\n        type: string  default: nullptr\n  --startup-blob <span class="token punctuation">(</span>Write V8 startup blob file. <span class="token punctuation">(</span>mksnapshot only<span class="token punctuation">))</span>\n        type: string  default: nullptr\n  --target-arch <span class="token punctuation">(</span>The mksnapshot target arch. <span class="token punctuation">(</span>mksnapshot only<span class="token punctuation">))</span>\n        type: string  default: nullptr\n  --target-os <span class="token punctuation">(</span>The mksnapshot target os. <span class="token punctuation">(</span>mksnapshot only<span class="token punctuation">))</span>\n        type: string  default: nullptr\n  --target-is-simulator <span class="token punctuation">(</span>Instruct mksnapshot that the target is meant to run <span class="token keyword">in</span> the simulator and it can generate simulator-specific instructions. <span class="token punctuation">(</span>mksnapshot only<span class="token punctuation">))</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --minor-mc-parallel-marking <span class="token punctuation">(</span>use parallel marking <span class="token keyword">for</span> the young generation<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --trace-minor-mc-parallel-marking <span class="token punctuation">(</span>trace parallel marking <span class="token keyword">for</span> the young generation<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --minor-mc <span class="token punctuation">(</span>perform young generation mark compact GCs<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --help <span class="token punctuation">(</span>Print usage message, including flags, on console<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --dump-counters <span class="token punctuation">(</span>Dump counters on <span class="token builtin class-name">exit</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --dump-counters-nvp <span class="token punctuation">(</span>Dump counters as name-value pairs on <span class="token builtin class-name">exit</span><span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --use-external-strings <span class="token punctuation">(</span>Use external strings <span class="token keyword">for</span> <span class="token builtin class-name">source</span> code<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --map-counters <span class="token punctuation">(</span>Map counters to a <span class="token function">file</span><span class="token punctuation">)</span>\n        type: string  default:\n  --mock-arraybuffer-allocator <span class="token punctuation">(</span>Use a mock ArrayBuffer allocator <span class="token keyword">for</span> testing.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --mock-arraybuffer-allocator-limit <span class="token punctuation">(</span>Memory limit <span class="token keyword">for</span> mock ArrayBuffer allocator used to simulate OOM <span class="token keyword">for</span> testing.<span class="token punctuation">)</span>\n        type: size_t  default: <span class="token number">0</span>\n  --gdbjit <span class="token punctuation">(</span>enable GDBJIT interface<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --gdbjit-full <span class="token punctuation">(</span>enable GDBJIT interface <span class="token keyword">for</span> all code objects<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --gdbjit-dump <span class="token punctuation">(</span>dump elf objects with debug info to disk<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --gdbjit-dump-filter <span class="token punctuation">(</span>dump only objects containing this substring<span class="token punctuation">)</span>\n        type: string  default:\n  --log <span class="token punctuation">(</span>Minimal logging <span class="token punctuation">(</span>no API, code, GC, suspect, or handles samples<span class="token punctuation">)</span>.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --log-all <span class="token punctuation">(</span>Log all events to the log file.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --log-api <span class="token punctuation">(</span>Log API events to the log file.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --log-code <span class="token punctuation">(</span>Log code events to the log <span class="token function">file</span> without profiling.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --log-handles <span class="token punctuation">(</span>Log global handle events.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --log-suspect <span class="token punctuation">(</span>Log suspect operations.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --log-source-code <span class="token punctuation">(</span>Log <span class="token builtin class-name">source</span> code.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --log-function-events <span class="token punctuation">(</span>Log <span class="token keyword">function</span> events <span class="token punctuation">(</span>parse, compile, execute<span class="token punctuation">)</span> separately.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --prof <span class="token punctuation">(</span>Log statistical profiling information <span class="token punctuation">(</span>implies --log-code<span class="token punctuation">)</span>.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --detailed-line-info <span class="token punctuation">(</span>Always generate detailed line information <span class="token keyword">for</span> CPU profiling.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --prof-sampling-interval <span class="token punctuation">(</span>Interval <span class="token keyword">for</span> --prof samples <span class="token punctuation">(</span>in microseconds<span class="token punctuation">)</span>.<span class="token punctuation">)</span>\n        type: int  default: <span class="token number">1000</span>\n  --prof-cpp <span class="token punctuation">(</span>Like --prof, but ignore generated code.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --prof-browser-mode <span class="token punctuation">(</span>Used with --prof, turns on browser-compatible mode <span class="token keyword">for</span> profiling.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --logfile <span class="token punctuation">(</span>Specify the name of the log file.<span class="token punctuation">)</span>\n        type: string  default: v8.log\n  --logfile-per-isolate <span class="token punctuation">(</span>Separate log files <span class="token keyword">for</span> each isolate.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --ll-prof <span class="token punctuation">(</span>Enable low-level linux profiler.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --gc-fake-mmap <span class="token punctuation">(</span>Specify the name of the <span class="token function">file</span> <span class="token keyword">for</span> fake gc mmap used <span class="token keyword">in</span> ll_prof<span class="token punctuation">)</span>\n        type: string  default: /tmp/__v8_gc__\n  --log-internal-timer-events <span class="token punctuation">(</span>Time internal events.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --redirect-code-traces <span class="token punctuation">(</span>output deopt information and disassembly into <span class="token function">file</span> code-<span class="token operator">&lt;</span>pid<span class="token operator">></span>-<span class="token operator">&lt;</span>isolate id<span class="token operator">></span>.asm<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --redirect-code-traces-to <span class="token punctuation">(</span>output deopt information and disassembly into the given <span class="token function">file</span><span class="token punctuation">)</span>\n        type: string  default: nullptr\n  --print-opt-source <span class="token punctuation">(</span>print <span class="token builtin class-name">source</span> code of optimized and inlined functions<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --vtune-prof-annotate-wasm <span class="token punctuation">(</span>Used when v8_enable_vtunejit is enabled, load wasm <span class="token builtin class-name">source</span> map and provide annotate support <span class="token punctuation">(</span>experimental<span class="token punctuation">)</span>.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --win64-unwinding-info <span class="token punctuation">(</span>Enable unwinding info <span class="token keyword">for</span> Windows/x64<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">true</span>\n  --interpreted-frames-native-stack <span class="token punctuation">(</span>Show interpreted frames on the native stack <span class="token punctuation">(</span>useful <span class="token keyword">for</span> external profilers<span class="token punctuation">)</span>.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --predictable <span class="token punctuation">(</span>enable predictable mode<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --predictable-gc-schedule <span class="token punctuation">(</span>Predictable garbage collection schedule. Fixes heap growing, idle, and memory reducing behavior.<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --single-threaded <span class="token punctuation">(</span>disable the use of background tasks<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n  --single-threaded-gc <span class="token punctuation">(</span>disable the use of background gc tasks<span class="token punctuation">)</span>\n        type: bool  default: <span class="token boolean">false</span>\n</code></pre>\n<p>特别有用的：</p>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">-</span><span class="token operator">-</span>async<span class="token operator">-</span>stack<span class="token operator">-</span>trace\n</code></pre>\n<h2 id="%E6%8C%81%E7%BB%AD%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95">持续的性能测试<a class="anchor" href="#%E6%8C%81%E7%BB%AD%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95">§</a></h2>\n<p>参考我们的测试 <a href="https://deno.land/benchmarks">https://deno.land/benchmarks</a></p>\n<p>测试图表假设 <a href="https://github.com/denoland/benchmark_data/blob/gh-pages/data.json">https://github.com/denoland/benchmark_data/blob/gh-pages/data.json</a> 有着 <code>BenchmarkData[]</code> 类型。以下是 <code>BenchmarkData</code> 的定义：</p>\n<pre class="language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">ExecTimeData</span> <span class="token punctuation">{</span>\n  mean<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  stddev<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  user<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  system<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  min<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  max<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">BenchmarkData</span> <span class="token punctuation">{</span>\n  created_at<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  sha1<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  benchmark<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> ExecTimeData<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  binarySizeData<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  threadCountData<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  syscallCountData<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>'
        } }),
    'toc': React.createElement("aside", { dangerouslySetInnerHTML: {
            __html: '<nav class="toc"><ol><li><a href="#%E6%B5%8B%E8%AF%95">测试</a></li><li><a href="#%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5%E4%B8%8E%E6%A0%BC%E5%BC%8F%E5%8C%96">代码检查与格式化</a></li><li><a href="#%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90">性能分析</a></li><li><a href="#%E4%BD%BF%E7%94%A8-lldb-%E8%B0%83%E8%AF%95">使用 LLDB 调试</a></li><li><a href="#debugging-with-lldb">Debugging with LLDB</a></li><li><a href="#v8-%E9%80%89%E9%A1%B9">V8 选项</a></li><li><a href="#%E6%8C%81%E7%BB%AD%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95">持续的性能测试</a></li></ol></nav>'
        } }),
    'author': "迷渡",
    'contributors': [
        "迷渡"
    ],
    'date': "2020-11-12T01:44:32.000Z",
    'updated': null,
    'excerpt': "测试 测试 deno: # 运行所有测试套件： cargo test # 只测试 cli/js/： cargo test js_unit_tests 测试 std/: cargo test std_tests 代码检查与格式化 检查 ./tools/lint.py 格式化 ./tools/format.py 性能分析 # 确认我们正在...",
    'cover': undefined,
    'sidebar': [
        {
            "title": "Deno 中文手册",
            "link": "index.html",
            "pagePath": "README.md"
        },
        {
            "title": "介绍",
            "link": "introduction.html",
            "pagePath": "introduction.md"
        },
        {
            "link": "getting_started.html",
            "children": [
                {
                    "title": "安装",
                    "link": "getting_started/installation.html",
                    "pagePath": "getting_started/installation.md"
                },
                {
                    "title": "设置您的环境",
                    "link": "getting_started/setup_your_environment.html",
                    "pagePath": "getting_started/setup_your_environment.md"
                },
                {
                    "title": "第一步",
                    "link": "getting_started/first_steps.html",
                    "pagePath": "getting_started/first_steps.md"
                },
                {
                    "title": "命令行界面",
                    "link": "getting_started/command_line_interface.html",
                    "pagePath": "getting_started/command_line_interface.md"
                },
                {
                    "title": "权限",
                    "link": "getting_started/permissions.html",
                    "pagePath": "getting_started/permissions.md"
                },
                {
                    "title": "使用 TypeScript",
                    "link": "getting_started/typescript.html",
                    "pagePath": "getting_started/typescript.md"
                },
                {
                    "title": "WebAssembly 支持",
                    "link": "getting_started/webassembly.html",
                    "pagePath": "getting_started/webassembly.md"
                }
            ],
            "title": "入门",
            "pagePath": "getting_started.md"
        },
        {
            "link": "runtime.html",
            "children": [
                {
                    "title": "稳定性",
                    "link": "runtime/stability.html",
                    "pagePath": "runtime/stability.md"
                },
                {
                    "title": "程序生命周期",
                    "link": "runtime/program_lifecycle.html",
                    "pagePath": "runtime/program_lifecycle.md"
                },
                {
                    "title": "编译器 API",
                    "link": "runtime/compiler_apis.html",
                    "pagePath": "runtime/compiler_apis.md"
                },
                {
                    "title": "Worker",
                    "link": "runtime/workers.html",
                    "pagePath": "runtime/workers.md"
                }
            ],
            "title": "运行时",
            "pagePath": "runtime.md"
        },
        {
            "link": "linking_to_external_code.html",
            "children": [
                {
                    "title": "重新加载特定的模块",
                    "link": "linking_to_external_code/reloading_modules.html",
                    "pagePath": "linking_to_external_code/reloading_modules.md"
                },
                {
                    "title": "完整性检查与锁定文件",
                    "link": "linking_to_external_code/integrity_checking.html",
                    "pagePath": "linking_to_external_code/integrity_checking.md"
                },
                {
                    "title": "代理（Proxies）",
                    "link": "linking_to_external_code/proxies.html",
                    "pagePath": "linking_to_external_code/proxies.md"
                },
                {
                    "title": "导入映射（Import maps）",
                    "link": "linking_to_external_code/import_maps.html",
                    "pagePath": "linking_to_external_code/import_maps.md"
                }
            ],
            "title": "与外部代码连接",
            "pagePath": "linking_to_external_code.md"
        },
        {
            "link": "standard_library.html",
            "title": "标准库",
            "pagePath": "standard_library.md"
        },
        {
            "link": "testing.html",
            "children": [
                {
                    "title": "断言",
                    "link": "testing/assertions.html",
                    "pagePath": "testing/assertions.md"
                }
            ],
            "title": "测试",
            "pagePath": "testing.md"
        },
        {
            "link": "tools.html",
            "children": [
                {
                    "title": "调试器 (debugger)",
                    "link": "tools/debugger.html",
                    "pagePath": "tools/debugger.md"
                },
                {
                    "title": "脚本安装器",
                    "link": "tools/script_installer.html",
                    "pagePath": "tools/script_installer.md"
                },
                {
                    "title": "代码格式化",
                    "link": "tools/formatter.html",
                    "pagePath": "tools/formatter.md"
                },
                {
                    "title": "打包",
                    "link": "tools/bundler.html",
                    "pagePath": "tools/bundler.md"
                },
                {
                    "title": "文档生成器",
                    "link": "tools/documentation_generator.html",
                    "pagePath": "tools/documentation_generator.md"
                },
                {
                    "title": "依赖检查器",
                    "link": "tools/dependency_inspector.html",
                    "pagePath": "tools/dependency_inspector.md"
                },
                {
                    "title": "Linter",
                    "link": "tools/linter.html",
                    "pagePath": "tools/linter.md"
                }
            ],
            "title": "内置工具",
            "pagePath": "tools.md"
        },
        {
            "link": "embedding_deno.html",
            "title": "嵌入式 Deno",
            "pagePath": "embedding_deno.md"
        },
        {
            "link": "contributing.html",
            "children": [
                {
                    "title": "从源码构建",
                    "link": "contributing/building_from_source.html",
                    "pagePath": "contributing/building_from_source.md"
                },
                {
                    "title": "测试和工具",
                    "link": "contributing/development_tools.html",
                    "pagePath": "contributing/development_tools.md"
                },
                {
                    "title": "Deno 风格指南",
                    "link": "contributing/style_guide.html",
                    "pagePath": "contributing/style_guide.md"
                },
                {
                    "title": "内部细节",
                    "link": "contributing/architecture.html",
                    "pagePath": "contributing/architecture.md"
                }
            ],
            "title": "贡献",
            "pagePath": "contributing.md"
        },
        {
            "link": "examples.html",
            "children": [
                {
                    "title": "Unix cat",
                    "link": "examples/unix_cat.html",
                    "pagePath": "examples/unix_cat.md"
                },
                {
                    "title": "文件服务器",
                    "link": "examples/file_server.html",
                    "pagePath": "examples/file_server.md"
                },
                {
                    "title": "TCP echo",
                    "link": "examples/tcp_echo.html",
                    "pagePath": "examples/tcp_echo.md"
                },
                {
                    "title": "运行子进程",
                    "link": "examples/subprocess.html",
                    "pagePath": "examples/subprocess.md"
                },
                {
                    "title": "检查与放弃权限",
                    "link": "examples/permissions.html",
                    "pagePath": "examples/permissions.md"
                },
                {
                    "title": "处理系统信号",
                    "link": "examples/os_signals.html",
                    "pagePath": "examples/os_signals.md"
                },
                {
                    "title": "文件系统事件",
                    "link": "examples/file_system_events.html",
                    "pagePath": "examples/file_system_events.md"
                },
                {
                    "title": "测试当前文件是否为主程序",
                    "link": "examples/testing_if_main.html",
                    "pagePath": "examples/testing_if_main.md"
                }
            ],
            "title": "示例",
            "pagePath": "examples.md"
        }
    ]
};
